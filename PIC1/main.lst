CCS PCM C Compiler, Version 5.015, 5967               02-abr.-21 19:02

               Filename:   D:\arc\UNIVERSIDAD\6to Semestre\Circuitos Digitales II\BusinessModel\BusinessModel\PIC1\main.lst

               ROM used:   1521 words (19%)
                           Largest free fragment is 2048
               RAM used:   36 (10%) at main() level
                           62 (17%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4B6
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  34
000C:  RETLW  35
000D:  RETLW  36
000E:  RETLW  37
000F:  RETLW  38
0010:  RETLW  39
0011:  RETLW  2A
0012:  RETLW  30
0013:  RETLW  23
0014:  DATA 0C,00
0015:  DATA 43,26
0016:  DATA 41,2B
0017:  DATA 45,10
0018:  DATA C1,21
0019:  DATA D4,2A
001A:  DATA 41,26
001B:  DATA 00,01
001C:  DATA 0C,00
001D:  DATA 43,26
001E:  DATA 41,2B
001F:  DATA 45,10
0020:  DATA CE,2A
0021:  DATA 45,2B
0022:  DATA 41,10
0023:  DATA 20,00
0024:  DATA 0C,00
0025:  DATA A0,21
0026:  DATA CC,20
0027:  DATA D6,22
0028:  DATA A0,24
0029:  DATA 4E,2B
002A:  DATA 41,26
002B:  DATA 49,22
002C:  DATA 41,10
002D:  DATA 00,01
002E:  DATA 0C,00
002F:  DATA A0,20
0030:  DATA F6,30
0031:  DATA 6E,3D
0032:  DATA 61,10
0033:  DATA 00,01
0034:  DATA 20,29
0035:  DATA 65,3A
0036:  DATA F2,37
0037:  DATA E3,32
0038:  DATA E4,32
0039:  DATA 20,00
003A:  DATA A0,29
003B:  DATA F4,37
003C:  DATA 70,10
003D:  DATA 00,00
003E:  DATA 0C,00
003F:  DATA 20,22
0040:  DATA C9,23
0041:  DATA 49,2A
0042:  DATA 45,10
0043:  DATA 43,26
0044:  DATA 41,2B
0045:  DATA 45,10
0046:  DATA 00,01
0047:  DATA 0C,00
0048:  DATA A0,21
0049:  DATA CC,20
004A:  DATA D6,22
004B:  DATA A0,21
004C:  DATA 4F,29
004D:  DATA D2,22
004E:  DATA 43,2A
004F:  DATA 41,10
0050:  DATA 00,01
0051:  DATA A0,22
0052:  DATA EE,31
0053:  DATA 65,37
0054:  DATA E4,34
0055:  DATA E4,37
0056:  DATA A0,3C
0057:  DATA A0,32
0058:  DATA 73,38
0059:  DATA 65,39
005A:  DATA 61,37
005B:  DATA E4,37
005C:  DATA 20,00
005D:  DATA A0,29
005E:  DATA C9,29
005F:  DATA D4,22
0060:  DATA CD,20
0061:  DATA 20,21
0062:  DATA CC,27
0063:  DATA D1,2A
0064:  DATA C5,20
0065:  DATA C4,27
0066:  DATA 20,00
0067:  DATA 0C,00
0068:  DATA A0,21
0069:  DATA CC,20
006A:  DATA D6,22
006B:  DATA A0,24
006C:  DATA 4E,2B
006D:  DATA 41,26
006E:  DATA 49,22
006F:  DATA 41,10
0070:  DATA 00,00
*
0119:  MOVLW  10
011A:  MOVWF  58
011B:  CLRF   77
011C:  CLRF   7A
011D:  RRF    55,F
011E:  RRF    54,F
011F:  BTFSS  03.0
0120:  GOTO   127
0121:  MOVF   56,W
0122:  ADDWF  77,F
0123:  BTFSC  03.0
0124:  INCF   7A,F
0125:  MOVF   57,W
0126:  ADDWF  7A,F
0127:  RRF    7A,F
0128:  RRF    77,F
0129:  RRF    79,F
012A:  RRF    78,F
012B:  DECFSZ 58,F
012C:  GOTO   11D
012D:  RETURN
012E:  CLRF   77
012F:  CLRF   78
0130:  MOVF   52,W
0131:  BCF    03.0
0132:  BTFSC  53.0
0133:  ADDWF  77,F
0134:  RRF    77,F
0135:  RRF    78,F
0136:  BTFSC  53.1
0137:  ADDWF  77,F
0138:  RRF    77,F
0139:  RRF    78,F
013A:  BTFSC  53.2
013B:  ADDWF  77,F
013C:  RRF    77,F
013D:  RRF    78,F
013E:  BTFSC  53.3
013F:  ADDWF  77,F
0140:  RRF    77,F
0141:  RRF    78,F
0142:  BTFSC  53.4
0143:  ADDWF  77,F
0144:  RRF    77,F
0145:  RRF    78,F
0146:  BTFSC  53.5
0147:  ADDWF  77,F
0148:  RRF    77,F
0149:  RRF    78,F
014A:  BTFSC  53.6
014B:  ADDWF  77,F
014C:  RRF    77,F
014D:  RRF    78,F
014E:  BTFSC  53.7
014F:  ADDWF  77,F
0150:  RRF    77,F
0151:  RRF    78,F
0152:  RETURN
*
0191:  MOVF   0B,W
0192:  MOVWF  48
0193:  BCF    0B.7
0194:  BSF    03.5
0195:  BSF    03.6
0196:  BSF    0C.7
0197:  BSF    0C.0
0198:  NOP
0199:  NOP
019A:  BCF    03.5
019B:  BCF    03.6
019C:  BTFSC  48.7
019D:  BSF    0B.7
019E:  BSF    03.6
019F:  MOVF   0C,W
01A0:  ANDLW  7F
01A1:  BTFSC  03.2
01A2:  GOTO   1E5
01A3:  BCF    03.6
01A4:  MOVWF  48
01A5:  BSF    03.6
01A6:  MOVF   0D,W
01A7:  BCF    03.6
01A8:  MOVWF  49
01A9:  BSF    03.6
01AA:  MOVF   0F,W
01AB:  BCF    03.6
01AC:  MOVWF  4A
01AD:  MOVF   48,W
01AE:  MOVWF  4B
01AF:  CALL   165
01B0:  MOVF   49,W
01B1:  BSF    03.6
01B2:  MOVWF  0D
01B3:  BCF    03.6
01B4:  MOVF   4A,W
01B5:  BSF    03.6
01B6:  MOVWF  0F
01B7:  BCF    03.6
01B8:  MOVF   0B,W
01B9:  MOVWF  4B
01BA:  BCF    0B.7
01BB:  BSF    03.5
01BC:  BSF    03.6
01BD:  BSF    0C.7
01BE:  BSF    0C.0
01BF:  NOP
01C0:  NOP
01C1:  BCF    03.5
01C2:  BCF    03.6
01C3:  BTFSC  4B.7
01C4:  BSF    0B.7
01C5:  BSF    03.6
01C6:  RLF    0C,W
01C7:  RLF    0E,W
01C8:  ANDLW  7F
01C9:  BTFSC  03.2
01CA:  GOTO   1E5
01CB:  BCF    03.6
01CC:  MOVWF  48
01CD:  BSF    03.6
01CE:  MOVF   0D,W
01CF:  BCF    03.6
01D0:  MOVWF  49
01D1:  BSF    03.6
01D2:  MOVF   0F,W
01D3:  BCF    03.6
01D4:  MOVWF  4A
01D5:  MOVF   48,W
01D6:  MOVWF  4B
01D7:  CALL   165
01D8:  MOVF   49,W
01D9:  BSF    03.6
01DA:  MOVWF  0D
01DB:  BCF    03.6
01DC:  MOVF   4A,W
01DD:  BSF    03.6
01DE:  MOVWF  0F
01DF:  INCF   0D,F
01E0:  BTFSC  03.2
01E1:  INCF   0F,F
01E2:  BCF    03.6
01E3:  GOTO   191
01E4:  BSF    03.6
01E5:  BCF    03.6
01E6:  RETURN
....................  
.................... #list 
....................  
.................... #fuses xt,noprotect,nowdt,nobrownout,noput,nolvp 
.................... #use delay(clock=4000000,crystal)            //Crystal 4MHz 
*
0071:  MOVLW  4C
0072:  MOVWF  04
0073:  BCF    03.7
0074:  MOVF   00,W
0075:  BTFSC  03.2
0076:  GOTO   085
0077:  MOVLW  01
0078:  MOVWF  78
0079:  CLRF   77
007A:  DECFSZ 77,F
007B:  GOTO   07A
007C:  DECFSZ 78,F
007D:  GOTO   079
007E:  MOVLW  4A
007F:  MOVWF  77
0080:  DECFSZ 77,F
0081:  GOTO   080
0082:  GOTO   083
0083:  DECFSZ 00,F
0084:  GOTO   077
0085:  RETURN
.................... #use rs232(baud=57600,xmit=pin_c6,rcv=pin_c7,bits=8) 
.................... #define use_portb_lcd True                   //Definiciones para colocar el LCD 
.................... #define use_portb_kbd True                   //y el teclado en el puerto B 
.................... #include <lcd.c>                             //Librerías del LCD y Teclado 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
009E:  MOVLW  0F
009F:  BSF    03.5
00A0:  ANDWF  06,W
00A1:  IORLW  F0
00A2:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A3:  BCF    03.5
00A4:  BSF    06.2
....................    delay_cycles(1); 
00A5:  NOP
....................    lcd_output_enable(1); 
00A6:  BSF    06.0
....................    delay_cycles(1); 
00A7:  NOP
....................    high = lcd_read_nibble(); 
00A8:  CALL   092
00A9:  MOVF   78,W
00AA:  MOVWF  53
....................        
....................    lcd_output_enable(0); 
00AB:  BCF    06.0
....................    delay_cycles(1); 
00AC:  NOP
....................    lcd_output_enable(1); 
00AD:  BSF    06.0
....................    delay_us(1); 
00AE:  NOP
....................    low = lcd_read_nibble(); 
00AF:  CALL   092
00B0:  MOVF   78,W
00B1:  MOVWF  52
....................        
....................    lcd_output_enable(0); 
00B2:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00B3:  MOVLW  0F
00B4:  BSF    03.5
00B5:  ANDWF  06,W
00B6:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B7:  BCF    03.5
00B8:  SWAPF  53,W
00B9:  MOVWF  77
00BA:  MOVLW  F0
00BB:  ANDWF  77,F
00BC:  MOVF   77,W
00BD:  IORWF  52,W
00BE:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0092:  MOVF   06,W
0093:  MOVWF  77
0094:  SWAPF  06,W
0095:  ANDLW  0F
0096:  MOVWF  78
....................   #endif 
0097:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0086:  SWAPF  53,W
0087:  ANDLW  F0
0088:  MOVWF  77
0089:  MOVLW  0F
008A:  ANDWF  06,W
008B:  IORWF  77,W
008C:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
008D:  NOP
....................    lcd_output_enable(1); 
008E:  BSF    06.0
....................    delay_us(2); 
008F:  GOTO   090
....................    lcd_output_enable(0); 
0090:  BCF    06.0
0091:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0098:  BSF    03.5
0099:  BCF    06.0
....................    lcd_rs_tris(); 
009A:  BCF    06.1
....................    lcd_rw_tris(); 
009B:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
009C:  BCF    03.5
009D:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00BF:  MOVF   78,W
00C0:  MOVWF  52
00C1:  BTFSC  52.7
00C2:  GOTO   09E
....................    lcd_output_rs(address); 
00C3:  BTFSS  50.0
00C4:  BCF    06.1
00C5:  BTFSC  50.0
00C6:  BSF    06.1
....................    delay_cycles(1); 
00C7:  NOP
....................    lcd_output_rw(0); 
00C8:  BCF    06.2
....................    delay_cycles(1); 
00C9:  NOP
....................    lcd_output_enable(0); 
00CA:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
00CB:  SWAPF  51,W
00CC:  MOVWF  52
00CD:  MOVLW  0F
00CE:  ANDWF  52,F
00CF:  MOVF   52,W
00D0:  MOVWF  53
00D1:  CALL   086
....................    lcd_send_nibble(n & 0xf); 
00D2:  MOVF   51,W
00D3:  ANDLW  0F
00D4:  MOVWF  52
00D5:  MOVWF  53
00D6:  CALL   086
00D7:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00D8:  MOVLW  28
00D9:  MOVWF  3E
00DA:  MOVLW  0C
00DB:  MOVWF  3F
00DC:  MOVLW  01
00DD:  MOVWF  40
00DE:  MOVLW  06
00DF:  MOVWF  41
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00E0:  BCF    06.0
....................    lcd_output_rs(0); 
00E1:  BCF    06.1
....................    lcd_output_rw(0); 
00E2:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00E3:  MOVLW  0F
00E4:  BSF    03.5
00E5:  ANDWF  06,W
00E6:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00E7:  BCF    06.0
....................    lcd_rs_tris(); 
00E8:  BCF    06.1
....................    lcd_rw_tris(); 
00E9:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00EA:  MOVLW  0F
00EB:  BCF    03.5
00EC:  MOVWF  4C
00ED:  CALL   071
....................    for(i=1;i<=3;++i) 
00EE:  MOVLW  01
00EF:  MOVWF  3D
00F0:  MOVF   3D,W
00F1:  SUBLW  03
00F2:  BTFSS  03.0
00F3:  GOTO   0FC
....................    { 
....................        lcd_send_nibble(3); 
00F4:  MOVLW  03
00F5:  MOVWF  53
00F6:  CALL   086
....................        delay_ms(5); 
00F7:  MOVLW  05
00F8:  MOVWF  4C
00F9:  CALL   071
00FA:  INCF   3D,F
00FB:  GOTO   0F0
....................    } 
....................     
....................    lcd_send_nibble(2); 
00FC:  MOVLW  02
00FD:  MOVWF  53
00FE:  CALL   086
....................    delay_ms(5); 
00FF:  MOVLW  05
0100:  MOVWF  4C
0101:  CALL   071
....................    for(i=0;i<=3;++i) 
0102:  CLRF   3D
0103:  MOVF   3D,W
0104:  SUBLW  03
0105:  BTFSS  03.0
0106:  GOTO   113
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0107:  MOVLW  3E
0108:  ADDWF  3D,W
0109:  MOVWF  04
010A:  BCF    03.7
010B:  MOVF   00,W
010C:  MOVWF  42
010D:  CLRF   50
010E:  MOVF   42,W
010F:  MOVWF  51
0110:  CALL   098
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0111:  INCF   3D,F
0112:  GOTO   103
0113:  BCF    0A.3
0114:  BCF    0A.4
0115:  GOTO   4E9 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0153:  DECFSZ 4D,W
0154:  GOTO   156
0155:  GOTO   159
....................       address=LCD_LINE_TWO; 
0156:  MOVLW  40
0157:  MOVWF  4E
0158:  GOTO   15A
....................    else 
....................       address=0; 
0159:  CLRF   4E
....................       
....................    address+=x-1; 
015A:  MOVLW  01
015B:  SUBWF  4C,W
015C:  ADDWF  4E,F
....................    lcd_send_byte(0,0x80|address); 
015D:  MOVF   4E,W
015E:  IORLW  80
015F:  MOVWF  4F
0160:  CLRF   50
0161:  MOVF   4F,W
0162:  MOVWF  51
0163:  CALL   098
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0164:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0165:  MOVF   4B,W
0166:  XORLW  07
0167:  BTFSC  03.2
0168:  GOTO   173
0169:  XORLW  0B
016A:  BTFSC  03.2
016B:  GOTO   178
016C:  XORLW  06
016D:  BTFSC  03.2
016E:  GOTO   180
016F:  XORLW  02
0170:  BTFSC  03.2
0171:  GOTO   186
0172:  GOTO   18B
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0173:  MOVLW  01
0174:  MOVWF  4C
0175:  MOVWF  4D
0176:  CALL   153
0177:  GOTO   190
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0178:  CLRF   50
0179:  MOVLW  01
017A:  MOVWF  51
017B:  CALL   098
....................                      delay_ms(2); 
017C:  MOVLW  02
017D:  MOVWF  4C
017E:  CALL   071
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
017F:  GOTO   190
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0180:  MOVLW  01
0181:  MOVWF  4C
0182:  MOVLW  02
0183:  MOVWF  4D
0184:  CALL   153
0185:  GOTO   190
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0186:  CLRF   50
0187:  MOVLW  10
0188:  MOVWF  51
0189:  CALL   098
018A:  GOTO   190
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
018B:  MOVLW  01
018C:  MOVWF  50
018D:  MOVF   4B,W
018E:  MOVWF  51
018F:  CALL   098
....................      #endif 
....................    } 
0190:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <kbd.c>  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
0116:  BCF    0A.3
0117:  BCF    0A.4
0118:  GOTO   4EA (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
04DC:  BCF    03.6
04DD:  CLRF   20
....................    static int1 kbd_down; 
04DE:  BCF    21.0
....................    static char last_key; 
04DF:  CLRF   22
....................    static BYTE col; 
04E0:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
01E7:  CLRF   48
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
01E8:  INCF   20,F
01E9:  MOVF   20,W
01EA:  SUBLW  21
01EB:  BTFSC  03.0
01EC:  GOTO   245
....................        switch (col) { 
01ED:  MOVF   23,W
01EE:  BTFSC  03.2
01EF:  GOTO   1F7
01F0:  XORLW  01
01F1:  BTFSC  03.2
01F2:  GOTO   1FD
01F3:  XORLW  03
01F4:  BTFSC  03.2
01F5:  GOTO   203
01F6:  GOTO   208
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
01F7:  MOVLW  DE
01F8:  BSF    03.5
01F9:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
01FA:  BCF    03.5
01FB:  MOVWF  06
....................                     break; 
01FC:  GOTO   208
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
01FD:  MOVLW  BE
01FE:  BSF    03.5
01FF:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0200:  BCF    03.5
0201:  MOVWF  06
....................                     break; 
0202:  GOTO   208
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0203:  MOVLW  7E
0204:  BSF    03.5
0205:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
0206:  BCF    03.5
0207:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
0208:  BTFSS  21.0
0209:  GOTO   214
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
020A:  MOVF   06,W
020B:  ANDLW  1E
020C:  SUBLW  1E
020D:  BTFSS  03.2
020E:  GOTO   213
....................            kbd_down=FALSE; 
020F:  BCF    21.0
....................            kchar=last_key; 
0210:  MOVF   22,W
0211:  MOVWF  48
....................            last_key='\0'; 
0212:  CLRF   22
....................          } 
....................        } else { 
0213:  GOTO   244
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
0214:  MOVF   06,W
0215:  ANDLW  1E
0216:  SUBLW  1E
0217:  BTFSC  03.2
0218:  GOTO   23F
....................              if((kbd & ROW0)==0) 
0219:  MOVF   06,W
021A:  ANDLW  02
021B:  BTFSS  03.2
021C:  GOTO   21F
....................                row=0; 
021D:  CLRF   49
021E:  GOTO   233
....................              else if((kbd & ROW1)==0) 
021F:  MOVF   06,W
0220:  ANDLW  04
0221:  BTFSS  03.2
0222:  GOTO   226
....................                row=1; 
0223:  MOVLW  01
0224:  MOVWF  49
0225:  GOTO   233
....................              else if((kbd & ROW2)==0) 
0226:  MOVF   06,W
0227:  ANDLW  08
0228:  BTFSS  03.2
0229:  GOTO   22D
....................                row=2; 
022A:  MOVLW  02
022B:  MOVWF  49
022C:  GOTO   233
....................              else if((kbd & ROW3)==0) 
022D:  MOVF   06,W
022E:  ANDLW  10
022F:  BTFSS  03.2
0230:  GOTO   233
....................                row=3; 
0231:  MOVLW  03
0232:  MOVWF  49
....................              last_key =KEYS[row][col]; 
0233:  MOVF   49,W
0234:  MOVWF  52
0235:  MOVLW  03
0236:  MOVWF  53
0237:  CALL   12E
0238:  MOVF   23,W
0239:  ADDWF  78,W
023A:  CALL   004
023B:  MOVWF  78
023C:  MOVWF  22
....................              kbd_down = TRUE; 
023D:  BSF    21.0
....................           } else { 
023E:  GOTO   244
....................              ++col; 
023F:  INCF   23,F
....................              if(col==3) 
0240:  MOVF   23,W
0241:  SUBLW  03
0242:  BTFSC  03.2
....................                col=0; 
0243:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
0244:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
0245:  MOVLW  FE
0246:  BSF    03.5
0247:  MOVWF  06
....................   return(kchar); 
0248:  BCF    03.5
0249:  MOVF   48,W
024A:  MOVWF  78
024B:  RETURN
.................... } 
....................  
.................... #byte PORTD= 7                               //Definiciones 
.................... #byte PORTB= 6 
.................... #define LED1 PORTD,4 
.................... #define LED2 PORTD,7 
....................  
.................... char K;                                      //Variables Globales 
.................... int8 MIL,CEN,DEC,UNI,VAL; 
.................... int16 contra=2021;               //Variable entera para almacenar la contraseña 
.................... int8 sinal;                      //Variable para saber si tengo contraseña 
.................... int direction; 
....................  
.................... void teclado() 
.................... { 
....................    k=kbd_getc();                 //Llamar la función del teclado y almacenar 
024C:  CALL   1E7
024D:  MOVF   78,W
024E:  MOVWF  24
....................                                  //el valor digitado en una variable tipo 
....................                                  //carácter. Si no se oprime ninguna tecla el 
....................                                  //teclado retornara el carácter nulo.*/ 
....................    while(k=='\0')    //si no se oprime ninguna tecla sigue llamando al teclado. 
024F:  MOVF   24,F
0250:  BTFSS  03.2
0251:  GOTO   256
....................    { 
....................       k=kbd_getc(); 
0252:  CALL   1E7
0253:  MOVF   78,W
0254:  MOVWF  24
0255:  GOTO   24F
....................    } 
....................    if( (k!='\0')) 
0256:  MOVF   24,F
0257:  BTFSC  03.2
0258:  GOTO   293
....................    { 
....................       if(K=='0')                             //Si K es igual a cero 
0259:  MOVF   24,W
025A:  SUBLW  30
025B:  BTFSC  03.2
....................          VAL=0;                              //Val es igual a cero 
025C:  CLRF   29
....................       if(K=='1') 
025D:  MOVF   24,W
025E:  SUBLW  31
025F:  BTFSS  03.2
0260:  GOTO   263
....................          VAL=1; 
0261:  MOVLW  01
0262:  MOVWF  29
....................       if(K=='2') 
0263:  MOVF   24,W
0264:  SUBLW  32
0265:  BTFSS  03.2
0266:  GOTO   269
....................          VAL=2; 
0267:  MOVLW  02
0268:  MOVWF  29
....................       if(K=='3') 
0269:  MOVF   24,W
026A:  SUBLW  33
026B:  BTFSS  03.2
026C:  GOTO   26F
....................          VAL=3; 
026D:  MOVLW  03
026E:  MOVWF  29
....................       if(K=='4') 
026F:  MOVF   24,W
0270:  SUBLW  34
0271:  BTFSS  03.2
0272:  GOTO   275
....................          VAL=4; 
0273:  MOVLW  04
0274:  MOVWF  29
....................       if(K=='5') 
0275:  MOVF   24,W
0276:  SUBLW  35
0277:  BTFSS  03.2
0278:  GOTO   27B
....................          VAL=5; 
0279:  MOVLW  05
027A:  MOVWF  29
....................       if(K=='6') 
027B:  MOVF   24,W
027C:  SUBLW  36
027D:  BTFSS  03.2
027E:  GOTO   281
....................          VAL=6; 
027F:  MOVLW  06
0280:  MOVWF  29
....................       if(K=='7') 
0281:  MOVF   24,W
0282:  SUBLW  37
0283:  BTFSS  03.2
0284:  GOTO   287
....................          VAL=7; 
0285:  MOVLW  07
0286:  MOVWF  29
....................       if(K=='8') 
0287:  MOVF   24,W
0288:  SUBLW  38
0289:  BTFSS  03.2
028A:  GOTO   28D
....................          VAL=8; 
028B:  MOVLW  08
028C:  MOVWF  29
....................       if(K=='9') 
028D:  MOVF   24,W
028E:  SUBLW  39
028F:  BTFSS  03.2
0290:  GOTO   293
....................          VAL=9; 
0291:  MOVLW  09
0292:  MOVWF  29
....................    } 
0293:  RETURN
.................... } 
....................  
.................... void pedir_clave(void)                       //Rutina para pedir la clave 
.................... { 
....................    teclado(); 
0294:  CALL   24C
....................    if((k!='#')&&(k!='*')) 
0295:  MOVF   24,W
0296:  SUBLW  23
0297:  BTFSC  03.2
0298:  GOTO   2A2
0299:  MOVF   24,W
029A:  SUBLW  2A
029B:  BTFSC  03.2
029C:  GOTO   2A2
....................    { 
....................       lcd_putc('*'); 
029D:  MOVLW  2A
029E:  MOVWF  4B
029F:  CALL   165
....................       MIL=VAL; 
02A0:  MOVF   29,W
02A1:  MOVWF  25
....................    } 
....................    if(k=='*' || k=='#') 
02A2:  MOVF   24,W
02A3:  SUBLW  2A
02A4:  BTFSC  03.2
02A5:  GOTO   2A9
02A6:  MOVF   24,W
02A7:  SUBLW  23
02A8:  BTFSC  03.2
....................       return; 
02A9:  GOTO   2EC
....................    teclado(); 
02AA:  CALL   24C
....................    if((k!='#')&&(k!='*')) 
02AB:  MOVF   24,W
02AC:  SUBLW  23
02AD:  BTFSC  03.2
02AE:  GOTO   2B8
02AF:  MOVF   24,W
02B0:  SUBLW  2A
02B1:  BTFSC  03.2
02B2:  GOTO   2B8
....................    { 
....................       lcd_putc('*'); 
02B3:  MOVLW  2A
02B4:  MOVWF  4B
02B5:  CALL   165
....................       CEN=VAL; 
02B6:  MOVF   29,W
02B7:  MOVWF  26
....................    } 
....................    if(k=='*' || k=='#') 
02B8:  MOVF   24,W
02B9:  SUBLW  2A
02BA:  BTFSC  03.2
02BB:  GOTO   2BF
02BC:  MOVF   24,W
02BD:  SUBLW  23
02BE:  BTFSC  03.2
....................       return; 
02BF:  GOTO   2EC
....................    teclado(); 
02C0:  CALL   24C
....................    if((k!='#')&&(k!='*')) 
02C1:  MOVF   24,W
02C2:  SUBLW  23
02C3:  BTFSC  03.2
02C4:  GOTO   2CE
02C5:  MOVF   24,W
02C6:  SUBLW  2A
02C7:  BTFSC  03.2
02C8:  GOTO   2CE
....................    { 
....................       lcd_putc('*'); 
02C9:  MOVLW  2A
02CA:  MOVWF  4B
02CB:  CALL   165
....................       DEC=VAL; 
02CC:  MOVF   29,W
02CD:  MOVWF  27
....................    } 
....................    if(k=='*' || k=='#') 
02CE:  MOVF   24,W
02CF:  SUBLW  2A
02D0:  BTFSC  03.2
02D1:  GOTO   2D5
02D2:  MOVF   24,W
02D3:  SUBLW  23
02D4:  BTFSC  03.2
....................       return; 
02D5:  GOTO   2EC
....................    teclado(); 
02D6:  CALL   24C
....................    if((k!='#')&&(k!='*')) 
02D7:  MOVF   24,W
02D8:  SUBLW  23
02D9:  BTFSC  03.2
02DA:  GOTO   2E4
02DB:  MOVF   24,W
02DC:  SUBLW  2A
02DD:  BTFSC  03.2
02DE:  GOTO   2E4
....................    { 
....................       lcd_putc('*'); 
02DF:  MOVLW  2A
02E0:  MOVWF  4B
02E1:  CALL   165
....................       UNI=VAL; 
02E2:  MOVF   29,W
02E3:  MOVWF  28
....................    } 
....................    if(k=='*' || k=='#') 
02E4:  MOVF   24,W
02E5:  SUBLW  2A
02E6:  BTFSC  03.2
02E7:  GOTO   2EB
02E8:  MOVF   24,W
02E9:  SUBLW  23
02EA:  BTFSC  03.2
....................       return; 
02EB:  GOTO   2EC
02EC:  RETURN
.................... } 
....................  
.................... int validar_clave(void) 
02ED:  CLRF   49
02EE:  CLRF   48
.................... { 
....................    //Variables locales 
....................    int16 clave=0,m,c,d,u; 
....................     
....................    m=MIL*1000;                               //Convierto miles a numero 
02EF:  CLRF   55
02F0:  MOVF   25,W
02F1:  MOVWF  54
02F2:  MOVLW  03
02F3:  MOVWF  57
02F4:  MOVLW  E8
02F5:  MOVWF  56
02F6:  CALL   119
02F7:  MOVF   79,W
02F8:  MOVWF  4B
02F9:  MOVF   78,W
02FA:  MOVWF  4A
....................    //c=_mul(CEN,100);            //Alternativa para multiplicar int8*int8=int16 
....................    c=(int16)CEN*100;                   //Convierto centemas, haciendo un CAST 
02FB:  CLRF   53
02FC:  MOVF   26,W
02FD:  MOVWF  52
02FE:  MOVF   53,W
02FF:  MOVWF  55
0300:  MOVF   26,W
0301:  MOVWF  54
0302:  CLRF   57
0303:  MOVLW  64
0304:  MOVWF  56
0305:  CALL   119
0306:  MOVF   79,W
0307:  MOVWF  4D
0308:  MOVF   78,W
0309:  MOVWF  4C
....................    d=DEC*10;                                 //Convierto decenas a numero  
030A:  MOVF   27,W
030B:  MOVWF  52
030C:  MOVLW  0A
030D:  MOVWF  53
030E:  CALL   12E
030F:  CLRF   4F
0310:  MOVF   78,W
0311:  MOVWF  4E
....................    u=UNI;                                    //Convierto unidades a numero  
0312:  CLRF   51
0313:  MOVF   28,W
0314:  MOVWF  50
....................     
....................    clave=m+c+d+u; 
0315:  MOVF   4C,W
0316:  ADDWF  4A,W
0317:  MOVWF  52
0318:  MOVF   4B,W
0319:  MOVWF  53
031A:  MOVF   4D,W
031B:  BTFSC  03.0
031C:  INCFSZ 4D,W
031D:  ADDWF  53,F
031E:  MOVF   4E,W
031F:  ADDWF  52,F
0320:  MOVF   4F,W
0321:  BTFSC  03.0
0322:  INCFSZ 4F,W
0323:  ADDWF  53,F
0324:  MOVF   50,W
0325:  ADDWF  52,W
0326:  MOVWF  48
0327:  MOVF   53,W
0328:  MOVWF  49
0329:  MOVF   51,W
032A:  BTFSC  03.0
032B:  INCFSZ 51,W
032C:  ADDWF  49,F
....................    MIL=0;CEN=0;DEC=0;UNI=0;      //Borra lo último que fue digitado en teclado 
032D:  CLRF   25
032E:  CLRF   26
032F:  CLRF   27
0330:  CLRF   28
....................     
....................    if(clave==contra) //Si la clave es igual a la contraseña 
0331:  MOVF   2A,W
0332:  SUBWF  48,W
0333:  BTFSS  03.2
0334:  GOTO   33D
0335:  MOVF   2B,W
0336:  SUBWF  49,W
0337:  BTFSS  03.2
0338:  GOTO   33D
....................       return(1); 
0339:  MOVLW  01
033A:  MOVWF  78
033B:  GOTO   33F
033C:  GOTO   33F
....................    else 
....................       return(0); 
033D:  MOVLW  00
033E:  MOVWF  78
033F:  RETURN
.................... } 
....................  
.................... void cambio_clave(void) 
0340:  CLRF   3D
0341:  CLRF   3F
0342:  CLRF   3E
.................... { 
....................    int bandera=0; 
....................    int16 clave=0,m,c,d,u; 
....................    LCD_PUTC("\f"); 
0343:  MOVLW  14
0344:  BSF    03.6
0345:  MOVWF  0D
0346:  MOVLW  00
0347:  MOVWF  0F
0348:  BCF    03.6
0349:  CALL   191
....................    LCD_GOTOXY(1,1); 
034A:  MOVLW  01
034B:  MOVWF  4C
034C:  MOVWF  4D
034D:  CALL   153
....................    LCD_PUTC("CLAVE ACTUAL"); 
034E:  MOVLW  15
034F:  BSF    03.6
0350:  MOVWF  0D
0351:  MOVLW  00
0352:  MOVWF  0F
0353:  BCF    03.6
0354:  CALL   191
....................    LCD_GOTOXY(1,2);       
0355:  MOVLW  01
0356:  MOVWF  4C
0357:  MOVLW  02
0358:  MOVWF  4D
0359:  CALL   153
....................    pedir_clave(); //Llama la funcion de pedir la clave 
035A:  CALL   294
....................    bandera=validar_clave(); //Compruebo si la clave actual es correcta 
035B:  CALL   2ED
035C:  MOVF   78,W
035D:  MOVWF  3D
....................     
....................    if(bandera==1) 
035E:  DECFSZ 3D,W
035F:  GOTO   471
....................    { 
....................       LCD_PUTC("\f"); 
0360:  MOVLW  1C
0361:  BSF    03.6
0362:  MOVWF  0D
0363:  MOVLW  00
0364:  MOVWF  0F
0365:  BCF    03.6
0366:  CALL   191
....................       LCD_GOTOXY(1,1); 
0367:  MOVLW  01
0368:  MOVWF  4C
0369:  MOVWF  4D
036A:  CALL   153
....................       LCD_PUTC("CLAVE NUEVA  "); 
036B:  MOVLW  1D
036C:  BSF    03.6
036D:  MOVWF  0D
036E:  MOVLW  00
036F:  MOVWF  0F
0370:  BCF    03.6
0371:  CALL   191
....................       LCD_GOTOXY(1,2);    
0372:  MOVLW  01
0373:  MOVWF  4C
0374:  MOVLW  02
0375:  MOVWF  4D
0376:  CALL   153
....................       teclado(); 
0377:  CALL   24C
....................       if((k!='#')&&(k!='*')) 
0378:  MOVF   24,W
0379:  SUBLW  23
037A:  BTFSC  03.2
037B:  GOTO   385
037C:  MOVF   24,W
037D:  SUBLW  2A
037E:  BTFSC  03.2
037F:  GOTO   385
....................       { 
....................          lcd_putc('*'); 
0380:  MOVLW  2A
0381:  MOVWF  4B
0382:  CALL   165
....................          MIL=VAL; 
0383:  MOVF   29,W
0384:  MOVWF  25
....................       } 
....................       teclado(); 
0385:  CALL   24C
....................       if((k!='#')&&(k!='*')) 
0386:  MOVF   24,W
0387:  SUBLW  23
0388:  BTFSC  03.2
0389:  GOTO   393
038A:  MOVF   24,W
038B:  SUBLW  2A
038C:  BTFSC  03.2
038D:  GOTO   393
....................       { 
....................          lcd_putc('*'); 
038E:  MOVLW  2A
038F:  MOVWF  4B
0390:  CALL   165
....................          CEN=VAL; 
0391:  MOVF   29,W
0392:  MOVWF  26
....................       } 
....................       teclado(); 
0393:  CALL   24C
....................       if((k!='#')&&(k!='*')) 
0394:  MOVF   24,W
0395:  SUBLW  23
0396:  BTFSC  03.2
0397:  GOTO   3A1
0398:  MOVF   24,W
0399:  SUBLW  2A
039A:  BTFSC  03.2
039B:  GOTO   3A1
....................       { 
....................          lcd_putc('*'); 
039C:  MOVLW  2A
039D:  MOVWF  4B
039E:  CALL   165
....................          DEC=VAL; 
039F:  MOVF   29,W
03A0:  MOVWF  27
....................       } 
....................       teclado(); 
03A1:  CALL   24C
....................       if((k!='#')&&(k!='*')) 
03A2:  MOVF   24,W
03A3:  SUBLW  23
03A4:  BTFSC  03.2
03A5:  GOTO   3AF
03A6:  MOVF   24,W
03A7:  SUBLW  2A
03A8:  BTFSC  03.2
03A9:  GOTO   3AF
....................       { 
....................          lcd_putc('*'); 
03AA:  MOVLW  2A
03AB:  MOVWF  4B
03AC:  CALL   165
....................          UNI=VAL; 
03AD:  MOVF   29,W
03AE:  MOVWF  28
....................       } 
....................        
....................       m=MIL*1000;                              //Convierto miles a numero 
03AF:  CLRF   55
03B0:  MOVF   25,W
03B1:  MOVWF  54
03B2:  MOVLW  03
03B3:  MOVWF  57
03B4:  MOVLW  E8
03B5:  MOVWF  56
03B6:  CALL   119
03B7:  MOVF   79,W
03B8:  MOVWF  41
03B9:  MOVF   78,W
03BA:  MOVWF  40
....................       c=CEN*10;            //Convierto centemas a numero y lo sumo al anterior 
03BB:  MOVF   26,W
03BC:  MOVWF  52
03BD:  MOVLW  0A
03BE:  MOVWF  53
03BF:  CALL   12E
03C0:  CLRF   43
03C1:  MOVF   78,W
03C2:  MOVWF  42
....................       c=c*10; 
03C3:  MOVF   43,W
03C4:  MOVWF  55
03C5:  MOVF   42,W
03C6:  MOVWF  54
03C7:  CLRF   57
03C8:  MOVLW  0A
03C9:  MOVWF  56
03CA:  CALL   119
03CB:  MOVF   79,W
03CC:  MOVWF  43
03CD:  MOVF   78,W
03CE:  MOVWF  42
....................       d=DEC*10;            //Convierto decenas a numero y lo sumo al anterior 
03CF:  MOVF   27,W
03D0:  MOVWF  52
03D1:  MOVLW  0A
03D2:  MOVWF  53
03D3:  CALL   12E
03D4:  CLRF   45
03D5:  MOVF   78,W
03D6:  MOVWF  44
....................       u=UNI;               //Convierto unidades a numero y lo sumo al anterior 
03D7:  CLRF   47
03D8:  MOVF   28,W
03D9:  MOVWF  46
....................       clave=m+c+d+u; 
03DA:  MOVF   42,W
03DB:  ADDWF  40,W
03DC:  MOVWF  48
03DD:  MOVF   41,W
03DE:  MOVWF  49
03DF:  MOVF   43,W
03E0:  BTFSC  03.0
03E1:  INCFSZ 43,W
03E2:  ADDWF  49,F
03E3:  MOVF   44,W
03E4:  ADDWF  48,F
03E5:  MOVF   45,W
03E6:  BTFSC  03.0
03E7:  INCFSZ 45,W
03E8:  ADDWF  49,F
03E9:  MOVF   46,W
03EA:  ADDWF  48,W
03EB:  MOVWF  3E
03EC:  MOVF   49,W
03ED:  MOVWF  3F
03EE:  MOVF   47,W
03EF:  BTFSC  03.0
03F0:  INCFSZ 47,W
03F1:  ADDWF  3F,F
....................        
....................       contra=clave; 
03F2:  MOVF   3F,W
03F3:  MOVWF  2B
03F4:  MOVF   3E,W
03F5:  MOVWF  2A
....................       WRITE_EEPROM(0,MIL); //Guarda en la eemprom posicion cero la nueva contraseña 
03F6:  MOVF   0B,W
03F7:  MOVWF  77
03F8:  BCF    0B.7
03F9:  BSF    03.6
03FA:  CLRF   0D
03FB:  BCF    03.6
03FC:  MOVF   25,W
03FD:  BSF    03.6
03FE:  MOVWF  0C
03FF:  BSF    03.5
0400:  BCF    0C.7
0401:  BSF    0C.2
0402:  MOVLW  55
0403:  MOVWF  0D
0404:  MOVLW  AA
0405:  MOVWF  0D
0406:  BSF    0C.1
0407:  BTFSC  0C.1
0408:  GOTO   407
0409:  BCF    0C.2
040A:  MOVF   77,W
040B:  BCF    03.5
040C:  BCF    03.6
040D:  IORWF  0B,F
....................       WRITE_EEPROM(1,CEN); 
040E:  MOVF   0B,W
040F:  MOVWF  77
0410:  BCF    0B.7
0411:  MOVLW  01
0412:  BSF    03.6
0413:  MOVWF  0D
0414:  BCF    03.6
0415:  MOVF   26,W
0416:  BSF    03.6
0417:  MOVWF  0C
0418:  BSF    03.5
0419:  BCF    0C.7
041A:  BSF    0C.2
041B:  MOVLW  55
041C:  MOVWF  0D
041D:  MOVLW  AA
041E:  MOVWF  0D
041F:  BSF    0C.1
0420:  BTFSC  0C.1
0421:  GOTO   420
0422:  BCF    0C.2
0423:  MOVF   77,W
0424:  BCF    03.5
0425:  BCF    03.6
0426:  IORWF  0B,F
....................       WRITE_EEPROM(2,DEC); 
0427:  MOVF   0B,W
0428:  MOVWF  77
0429:  BCF    0B.7
042A:  MOVLW  02
042B:  BSF    03.6
042C:  MOVWF  0D
042D:  BCF    03.6
042E:  MOVF   27,W
042F:  BSF    03.6
0430:  MOVWF  0C
0431:  BSF    03.5
0432:  BCF    0C.7
0433:  BSF    0C.2
0434:  MOVLW  55
0435:  MOVWF  0D
0436:  MOVLW  AA
0437:  MOVWF  0D
0438:  BSF    0C.1
0439:  BTFSC  0C.1
043A:  GOTO   439
043B:  BCF    0C.2
043C:  MOVF   77,W
043D:  BCF    03.5
043E:  BCF    03.6
043F:  IORWF  0B,F
....................       WRITE_EEPROM(3,UNI); 
0440:  MOVF   0B,W
0441:  MOVWF  77
0442:  BCF    0B.7
0443:  MOVLW  03
0444:  BSF    03.6
0445:  MOVWF  0D
0446:  BCF    03.6
0447:  MOVF   28,W
0448:  BSF    03.6
0449:  MOVWF  0C
044A:  BSF    03.5
044B:  BCF    0C.7
044C:  BSF    0C.2
044D:  MOVLW  55
044E:  MOVWF  0D
044F:  MOVLW  AA
0450:  MOVWF  0D
0451:  BSF    0C.1
0452:  BTFSC  0C.1
0453:  GOTO   452
0454:  BCF    0C.2
0455:  MOVF   77,W
0456:  BCF    03.5
0457:  BCF    03.6
0458:  IORWF  0B,F
....................       WRITE_EEPROM(4,12); //Guardo un 12 en la posicion 1 de la EEPROM, para decir que tengo 
0459:  MOVF   0B,W
045A:  MOVWF  77
045B:  BCF    0B.7
045C:  MOVLW  04
045D:  BSF    03.6
045E:  MOVWF  0D
045F:  MOVLW  0C
0460:  MOVWF  0C
0461:  BSF    03.5
0462:  BCF    0C.7
0463:  BSF    0C.2
0464:  MOVLW  55
0465:  MOVWF  0D
0466:  MOVLW  AA
0467:  MOVWF  0D
0468:  BSF    0C.1
0469:  BTFSC  0C.1
046A:  GOTO   469
046B:  BCF    0C.2
046C:  MOVF   77,W
046D:  BCF    03.5
046E:  BCF    03.6
046F:  IORWF  0B,F
....................       //una contraseña guardada 
....................    } 
0470:  GOTO   494
....................    else 
....................    { 
....................       LCD_PUTC("\f"); 
0471:  MOVLW  24
0472:  BSF    03.6
0473:  MOVWF  0D
0474:  MOVLW  00
0475:  MOVWF  0F
0476:  BCF    03.6
0477:  CALL   191
....................       LCD_GOTOXY(1,2); 
0478:  MOVLW  01
0479:  MOVWF  4C
047A:  MOVLW  02
047B:  MOVWF  4D
047C:  CALL   153
....................       LCD_PUTC(" CLAVE INVALIDA "); 
047D:  MOVLW  25
047E:  BSF    03.6
047F:  MOVWF  0D
0480:  MOVLW  00
0481:  MOVWF  0F
0482:  BCF    03.6
0483:  CALL   191
....................       BIT_SET(LED2); 
0484:  BSF    07.7
....................       DELAY_MS(4000); 
0485:  MOVLW  10
0486:  MOVWF  48
0487:  MOVLW  FA
0488:  MOVWF  4C
0489:  CALL   071
048A:  DECFSZ 48,F
048B:  GOTO   487
....................       BIT_CLEAR(LED2); 
048C:  BCF    07.7
....................       LCD_PUTC("\f"); 
048D:  MOVLW  2E
048E:  BSF    03.6
048F:  MOVWF  0D
0490:  MOVLW  00
0491:  MOVWF  0F
0492:  BCF    03.6
0493:  CALL   191
....................    } 
0494:  RETURN
.................... } 
....................  
.................... void imprimir_direccion(void) 
.................... { 
....................    if(direction == 1); 
0495:  DECFSZ 2D,W
0496:  GOTO   497
....................    { 
....................       LCD_PUTC(" Avanza "); 
0497:  MOVLW  2F
0498:  BSF    03.6
0499:  MOVWF  0D
049A:  MOVLW  00
049B:  MOVWF  0F
049C:  BCF    03.6
049D:  CALL   191
....................    } 
....................     
....................    if(direction == 2); 
049E:  MOVF   2D,W
049F:  SUBLW  02
04A0:  BTFSC  03.2
04A1:  GOTO   4A2
....................    { 
....................       LCD_PUTC(" Retrocede "); 
04A2:  MOVLW  34
04A3:  BSF    03.6
04A4:  MOVWF  0D
04A5:  MOVLW  00
04A6:  MOVWF  0F
04A7:  BCF    03.6
04A8:  CALL   191
....................    } 
....................     
....................    if(direction == 0); 
04A9:  MOVF   2D,F
04AA:  BTFSC  03.2
04AB:  GOTO   4AC
....................    { 
....................       LCD_PUTC(" Stop ");    
04AC:  MOVLW  3A
04AD:  BSF    03.6
04AE:  MOVWF  0D
04AF:  MOVLW  00
04B0:  MOVWF  0F
04B1:  BCF    03.6
04B2:  CALL   191
....................    } 
04B3:  BCF    0A.3
04B4:  BCF    0A.4
04B5:  GOTO   5C8 (RETURN)
.................... } 
....................  
.................... void main() 
04B6:  MOVF   03,W
04B7:  ANDLW  1F
04B8:  MOVWF  03
04B9:  BSF    03.5
04BA:  BSF    03.6
04BB:  BSF    07.3
04BC:  MOVLW  10
04BD:  BCF    03.6
04BE:  MOVWF  19
04BF:  MOVLW  00
04C0:  MOVWF  1A
04C1:  MOVLW  A6
04C2:  MOVWF  18
04C3:  MOVLW  90
04C4:  BCF    03.5
04C5:  MOVWF  18
04C6:  MOVLW  07
04C7:  MOVWF  2B
04C8:  MOVLW  E5
04C9:  MOVWF  2A
04CA:  MOVLW  FF
04CB:  MOVWF  2E
04CC:  BSF    03.5
04CD:  BSF    03.6
04CE:  MOVF   09,W
04CF:  ANDLW  C0
04D0:  MOVWF  09
04D1:  BCF    03.6
04D2:  BCF    1F.4
04D3:  BCF    1F.5
04D4:  MOVLW  00
04D5:  BSF    03.6
04D6:  MOVWF  08
04D7:  BCF    03.5
04D8:  CLRF   07
04D9:  CLRF   08
04DA:  CLRF   09
04DB:  BCF    03.7
*
04E1:  CLRF   3B
.................... { 
....................    int16 m,c,d,u;                            //Variables Locales 
....................    INT8 m1,c1,d1,u1; 
....................    int flag = 0; 
....................    int order; 
....................     
....................    SET_TRIS_C(0B00000000);                   //Puerto C como Salida 
04E2:  MOVLW  00
04E3:  BSF    03.5
04E4:  MOVWF  07
04E5:  BCF    03.5
04E6:  MOVWF  2E
....................    PORTD=0;                                  //Limpia Puerto C 
04E7:  CLRF   07
....................    lcd_init();                               //Inicializa el LCD 
04E8:  GOTO   0D8
....................    kbd_init();                               //Inicializa el Teclado 
04E9:  GOTO   116
....................     
....................                               //Configura las Resistencias PULL-UP del Puerto B 
....................    port_b_pullups(0xFF);                     //PIC 16F887 
04EA:  MOVLW  FF
04EB:  BSF    03.5
04EC:  MOVWF  15
04ED:  BCF    01.7
....................     
....................    sinal=READ_EEPROM(4);       //Averiguo si tengo una contraseña guardada o no 
04EE:  MOVLW  04
04EF:  BCF    03.5
04F0:  BSF    03.6
04F1:  MOVWF  0D
04F2:  BSF    03.5
04F3:  BCF    0C.7
04F4:  BSF    0C.0
04F5:  BCF    03.5
04F6:  MOVF   0C,W
04F7:  BCF    03.6
04F8:  MOVWF  2C
....................     
....................    if(sinal!=12) 
04F9:  MOVF   2C,W
04FA:  SUBLW  0C
04FB:  BTFSC  03.2
04FC:  GOTO   502
....................       contra=9999; 
04FD:  MOVLW  27
04FE:  MOVWF  2B
04FF:  MOVLW  0F
0500:  MOVWF  2A
0501:  GOTO   567
....................    else 
....................    { 
....................       m1=READ_EEPROM(0);                     //Lee los datos del EEPROM 
0502:  BSF    03.6
0503:  CLRF   0D
0504:  BSF    03.5
0505:  BCF    0C.7
0506:  BSF    0C.0
0507:  BCF    03.5
0508:  MOVF   0C,W
0509:  BCF    03.6
050A:  MOVWF  37
....................       c1=READ_EEPROM(1);  
050B:  MOVLW  01
050C:  BSF    03.6
050D:  MOVWF  0D
050E:  BSF    03.5
050F:  BCF    0C.7
0510:  BSF    0C.0
0511:  BCF    03.5
0512:  MOVF   0C,W
0513:  BCF    03.6
0514:  MOVWF  38
....................       d1=READ_EEPROM(2);  
0515:  MOVLW  02
0516:  BSF    03.6
0517:  MOVWF  0D
0518:  BSF    03.5
0519:  BCF    0C.7
051A:  BSF    0C.0
051B:  BCF    03.5
051C:  MOVF   0C,W
051D:  BCF    03.6
051E:  MOVWF  39
....................       u1=READ_EEPROM(3); 
051F:  MOVLW  03
0520:  BSF    03.6
0521:  MOVWF  0D
0522:  BSF    03.5
0523:  BCF    0C.7
0524:  BSF    0C.0
0525:  BCF    03.5
0526:  MOVF   0C,W
0527:  BCF    03.6
0528:  MOVWF  3A
....................        
....................       m=m1*1000;                             //Convierto miles a numero 
0529:  CLRF   55
052A:  MOVF   37,W
052B:  MOVWF  54
052C:  MOVLW  03
052D:  MOVWF  57
052E:  MOVLW  E8
052F:  MOVWF  56
0530:  CALL   119
0531:  MOVF   79,W
0532:  MOVWF  30
0533:  MOVF   78,W
0534:  MOVWF  2F
....................       //c=_mul(c1,100);          //Alternativa para multiplicar int8*int8=int16 
....................       c=(int16)c1*100;                 //Convierto centemas, haciendo un CAST 
0535:  CLRF   3E
0536:  MOVF   38,W
0537:  MOVWF  3D
0538:  MOVF   3E,W
0539:  MOVWF  55
053A:  MOVF   38,W
053B:  MOVWF  54
053C:  CLRF   57
053D:  MOVLW  64
053E:  MOVWF  56
053F:  CALL   119
0540:  MOVF   79,W
0541:  MOVWF  32
0542:  MOVF   78,W
0543:  MOVWF  31
....................       d=d1*10;                               //Convierto decenas a numero  
0544:  MOVF   39,W
0545:  MOVWF  52
0546:  MOVLW  0A
0547:  MOVWF  53
0548:  CALL   12E
0549:  CLRF   34
054A:  MOVF   78,W
054B:  MOVWF  33
....................       u=u1;                                  //Convierto unidades a numero  
054C:  CLRF   36
054D:  MOVF   3A,W
054E:  MOVWF  35
....................       contra=m+c+d+u; 
054F:  MOVF   31,W
0550:  ADDWF  2F,W
0551:  MOVWF  3D
0552:  MOVF   30,W
0553:  MOVWF  3E
0554:  MOVF   32,W
0555:  BTFSC  03.0
0556:  INCFSZ 32,W
0557:  ADDWF  3E,F
0558:  MOVF   33,W
0559:  ADDWF  3D,F
055A:  MOVF   34,W
055B:  BTFSC  03.0
055C:  INCFSZ 34,W
055D:  ADDWF  3E,F
055E:  MOVF   35,W
055F:  ADDWF  3D,W
0560:  MOVWF  2A
0561:  MOVF   3E,W
0562:  MOVWF  2B
0563:  MOVF   36,W
0564:  BTFSC  03.0
0565:  INCFSZ 36,W
0566:  ADDWF  2B,F
....................    } 
....................     
....................    while(TRUE) 
....................    { 
....................       LCD_PUTC("\f"); 
0567:  MOVLW  3E
0568:  BSF    03.6
0569:  MOVWF  0D
056A:  MOVLW  00
056B:  MOVWF  0F
056C:  BCF    03.6
056D:  CALL   191
....................       LCD_GOTOXY(1,1); 
056E:  MOVLW  01
056F:  MOVWF  4C
0570:  MOVWF  4D
0571:  CALL   153
....................       LCD_PUTC(" DIGITE CLAVE "); 
0572:  MOVLW  3F
0573:  BSF    03.6
0574:  MOVWF  0D
0575:  MOVLW  00
0576:  MOVWF  0F
0577:  BCF    03.6
0578:  CALL   191
....................       LCD_GOTOXY(1,2); 
0579:  MOVLW  01
057A:  MOVWF  4C
057B:  MOVLW  02
057C:  MOVWF  4D
057D:  CALL   153
....................       DELAY_MS(1000); 
057E:  MOVLW  04
057F:  MOVWF  3D
0580:  MOVLW  FA
0581:  MOVWF  4C
0582:  CALL   071
0583:  DECFSZ 3D,F
0584:  GOTO   580
....................       pedir_clave();                      //Llama la funcion de pedir la clave 
0585:  CALL   294
....................        
....................       if(k=='*') 
0586:  MOVF   24,W
0587:  SUBLW  2A
0588:  BTFSS  03.2
0589:  GOTO   58C
....................          cambio_clave(); 
058A:  CALL   340
058B:  GOTO   5EF
....................       else 
....................       { 
....................          while((k!='#')) 
058C:  MOVF   24,W
058D:  SUBLW  23
058E:  BTFSC  03.2
058F:  GOTO   596
....................          { 
....................             TECLADO(); 
0590:  CALL   24C
....................             if(k=='*') 
0591:  MOVF   24,W
0592:  SUBLW  2A
0593:  BTFSC  03.2
....................             cambio_clave(); 
0594:  CALL   340
0595:  GOTO   58C
....................          } 
....................          if(validar_clave())                 //Validación clave 
0596:  CALL   2ED
0597:  MOVF   78,F
0598:  BTFSC  03.2
0599:  GOTO   5D3
....................          { 
....................             flag = 1; 
059A:  MOVLW  01
059B:  MOVWF  3B
....................                          
....................             LCD_PUTC("\f"); //Se borra LCD 
059C:  MOVLW  47
059D:  BSF    03.6
059E:  MOVWF  0D
059F:  MOVLW  00
05A0:  MOVWF  0F
05A1:  BCF    03.6
05A2:  CALL   191
....................             LCD_GOTOXY(1,1);//Se ubica en la posición 1,1 
05A3:  MOVLW  01
05A4:  MOVWF  4C
05A5:  MOVWF  4D
05A6:  CALL   153
....................             LCD_PUTC(" CLAVE CORRECTA "); 
05A7:  MOVLW  48
05A8:  BSF    03.6
05A9:  MOVWF  0D
05AA:  MOVLW  00
05AB:  MOVWF  0F
05AC:  BCF    03.6
05AD:  CALL   191
....................             BIT_SET(LED1); 
05AE:  BSF    07.4
....................              
....................             while(flag == 1) 
05AF:  DECFSZ 3B,W
05B0:  GOTO   5D2
....................             {   
....................                LCD_PUTC(" Encendido y esperando "); 
05B1:  MOVLW  51
05B2:  BSF    03.6
05B3:  MOVWF  0D
05B4:  MOVLW  00
05B5:  MOVWF  0F
05B6:  BCF    03.6
05B7:  CALL   191
....................                order = teclado; 
05B8:  MOVLW  02
05B9:  MOVWF  7A
05BA:  MOVLW  4C
05BB:  MOVWF  3C
....................                if(order != 0) 
05BC:  MOVF   3C,F
05BD:  BTFSC  03.2
05BE:  GOTO   5C9
....................                { 
....................                   putc(order); 
05BF:  MOVF   3C,W
05C0:  BTFSS  0C.4
05C1:  GOTO   5C0
05C2:  MOVWF  19
....................                   direction = getc(); 
05C3:  BTFSS  0C.5
05C4:  GOTO   5C3
05C5:  MOVF   1A,W
05C6:  MOVWF  2D
....................                   imprimir_direccion(); 
05C7:  GOTO   495
....................                } 
05C8:  GOTO   5D1
....................                else 
....................                { 
....................                   LCD_PUTC(" SISTEMA BLOQUEADO "); 
05C9:  MOVLW  5D
05CA:  BSF    03.6
05CB:  MOVWF  0D
05CC:  MOVLW  00
05CD:  MOVWF  0F
05CE:  BCF    03.6
05CF:  CALL   191
....................                   flag = 0; 
05D0:  CLRF   3B
....................                } 
05D1:  GOTO   5AF
....................             }   
....................          } 
05D2:  GOTO   5EF
....................          else 
....................          { 
....................             LCD_PUTC("\f"); 
05D3:  MOVLW  67
05D4:  BSF    03.6
05D5:  MOVWF  0D
05D6:  MOVLW  00
05D7:  MOVWF  0F
05D8:  BCF    03.6
05D9:  CALL   191
....................             LCD_GOTOXY(1,2); 
05DA:  MOVLW  01
05DB:  MOVWF  4C
05DC:  MOVLW  02
05DD:  MOVWF  4D
05DE:  CALL   153
....................             LCD_PUTC(" CLAVE INVALIDA "); 
05DF:  MOVLW  68
05E0:  BSF    03.6
05E1:  MOVWF  0D
05E2:  MOVLW  00
05E3:  MOVWF  0F
05E4:  BCF    03.6
05E5:  CALL   191
....................             BIT_SET(LED2); 
05E6:  BSF    07.7
....................             DELAY_MS(4000); 
05E7:  MOVLW  10
05E8:  MOVWF  3D
05E9:  MOVLW  FA
05EA:  MOVWF  4C
05EB:  CALL   071
05EC:  DECFSZ 3D,F
05ED:  GOTO   5E9
....................             BIT_CLEAR(LED2); 
05EE:  BCF    07.7
....................          } 
....................       } 
05EF:  GOTO   567
....................    } 
.................... } 
05F0:  SLEEP

Configuration Fuses:
   Word  1: 2CF1   XT NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
