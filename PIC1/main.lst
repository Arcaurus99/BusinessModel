CCS PCM C Compiler, Version 5.015, 5967               31-mar.-21 23:43

               Filename:   D:\arc\UNIVERSIDAD\6to Semestre\Circuitos Digitales II\BusinessModel\BusinessModel\main.lst

               ROM used:   1509 words (18%)
                           Largest free fragment is 2048
               RAM used:   33 (9%) at main() level
                           59 (16%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4D0
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  34
000C:  RETLW  35
000D:  RETLW  36
000E:  RETLW  37
000F:  RETLW  38
0010:  RETLW  39
0011:  RETLW  2A
0012:  RETLW  30
0013:  RETLW  23
0014:  DATA 0C,00
0015:  DATA 43,26
0016:  DATA 41,2B
0017:  DATA 45,10
0018:  DATA C1,21
0019:  DATA D4,2A
001A:  DATA 41,26
001B:  DATA 00,01
001C:  DATA 0C,00
001D:  DATA 43,26
001E:  DATA 41,2B
001F:  DATA 45,10
0020:  DATA CE,2A
0021:  DATA 45,2B
0022:  DATA 41,10
0023:  DATA 20,00
0024:  DATA 0C,00
0025:  DATA A0,21
0026:  DATA CC,20
0027:  DATA D6,22
0028:  DATA A0,24
0029:  DATA 4E,2B
002A:  DATA 41,26
002B:  DATA 49,22
002C:  DATA 41,10
002D:  DATA 00,01
002E:  DATA 0C,00
002F:  DATA 0C,00
0030:  DATA 20,22
0031:  DATA C9,23
0032:  DATA 49,2A
0033:  DATA 45,10
0034:  DATA 43,26
0035:  DATA 41,2B
0036:  DATA 45,10
0037:  DATA 00,01
0038:  DATA 0C,00
0039:  DATA A0,21
003A:  DATA CC,20
003B:  DATA D6,22
003C:  DATA A0,21
003D:  DATA 4F,29
003E:  DATA D2,22
003F:  DATA 43,2A
0040:  DATA 41,10
0041:  DATA 00,01
0042:  DATA 0C,00
0043:  DATA A0,21
0044:  DATA CC,20
0045:  DATA D6,22
0046:  DATA A0,24
0047:  DATA 4E,2B
0048:  DATA 41,26
0049:  DATA 49,22
004A:  DATA 41,10
004B:  DATA 00,00
*
0105:  MOVLW  10
0106:  MOVWF  55
0107:  CLRF   77
0108:  CLRF   7A
0109:  RRF    52,F
010A:  RRF    51,F
010B:  BTFSS  03.0
010C:  GOTO   113
010D:  MOVF   53,W
010E:  ADDWF  77,F
010F:  BTFSC  03.0
0110:  INCF   7A,F
0111:  MOVF   54,W
0112:  ADDWF  7A,F
0113:  RRF    7A,F
0114:  RRF    77,F
0115:  RRF    79,F
0116:  RRF    78,F
0117:  DECFSZ 55,F
0118:  GOTO   109
0119:  RETURN
011A:  CLRF   77
011B:  CLRF   78
011C:  MOVF   4F,W
011D:  BCF    03.0
011E:  BTFSC  50.0
011F:  ADDWF  77,F
0120:  RRF    77,F
0121:  RRF    78,F
0122:  BTFSC  50.1
0123:  ADDWF  77,F
0124:  RRF    77,F
0125:  RRF    78,F
0126:  BTFSC  50.2
0127:  ADDWF  77,F
0128:  RRF    77,F
0129:  RRF    78,F
012A:  BTFSC  50.3
012B:  ADDWF  77,F
012C:  RRF    77,F
012D:  RRF    78,F
012E:  BTFSC  50.4
012F:  ADDWF  77,F
0130:  RRF    77,F
0131:  RRF    78,F
0132:  BTFSC  50.5
0133:  ADDWF  77,F
0134:  RRF    77,F
0135:  RRF    78,F
0136:  BTFSC  50.6
0137:  ADDWF  77,F
0138:  RRF    77,F
0139:  RRF    78,F
013A:  BTFSC  50.7
013B:  ADDWF  77,F
013C:  RRF    77,F
013D:  RRF    78,F
013E:  RETURN
*
017D:  MOVF   0B,W
017E:  MOVWF  45
017F:  BCF    0B.7
0180:  BSF    03.5
0181:  BSF    03.6
0182:  BSF    0C.7
0183:  BSF    0C.0
0184:  NOP
0185:  NOP
0186:  BCF    03.5
0187:  BCF    03.6
0188:  BTFSC  45.7
0189:  BSF    0B.7
018A:  BSF    03.6
018B:  MOVF   0C,W
018C:  ANDLW  7F
018D:  BTFSC  03.2
018E:  GOTO   1D1
018F:  BCF    03.6
0190:  MOVWF  45
0191:  BSF    03.6
0192:  MOVF   0D,W
0193:  BCF    03.6
0194:  MOVWF  46
0195:  BSF    03.6
0196:  MOVF   0F,W
0197:  BCF    03.6
0198:  MOVWF  47
0199:  MOVF   45,W
019A:  MOVWF  48
019B:  CALL   151
019C:  MOVF   46,W
019D:  BSF    03.6
019E:  MOVWF  0D
019F:  BCF    03.6
01A0:  MOVF   47,W
01A1:  BSF    03.6
01A2:  MOVWF  0F
01A3:  BCF    03.6
01A4:  MOVF   0B,W
01A5:  MOVWF  48
01A6:  BCF    0B.7
01A7:  BSF    03.5
01A8:  BSF    03.6
01A9:  BSF    0C.7
01AA:  BSF    0C.0
01AB:  NOP
01AC:  NOP
01AD:  BCF    03.5
01AE:  BCF    03.6
01AF:  BTFSC  48.7
01B0:  BSF    0B.7
01B1:  BSF    03.6
01B2:  RLF    0C,W
01B3:  RLF    0E,W
01B4:  ANDLW  7F
01B5:  BTFSC  03.2
01B6:  GOTO   1D1
01B7:  BCF    03.6
01B8:  MOVWF  45
01B9:  BSF    03.6
01BA:  MOVF   0D,W
01BB:  BCF    03.6
01BC:  MOVWF  46
01BD:  BSF    03.6
01BE:  MOVF   0F,W
01BF:  BCF    03.6
01C0:  MOVWF  47
01C1:  MOVF   45,W
01C2:  MOVWF  48
01C3:  CALL   151
01C4:  MOVF   46,W
01C5:  BSF    03.6
01C6:  MOVWF  0D
01C7:  BCF    03.6
01C8:  MOVF   47,W
01C9:  BSF    03.6
01CA:  MOVWF  0F
01CB:  INCF   0D,F
01CC:  BTFSC  03.2
01CD:  INCF   0F,F
01CE:  BCF    03.6
01CF:  GOTO   17D
01D0:  BSF    03.6
01D1:  BCF    03.6
01D2:  RETURN
....................  
.................... #list 
....................  
.................... #fuses xt,noprotect,nowdt,nobrownout,noput,nolvp 
.................... #use delay(clock=4000000,crystal)            //Crystal 4MHz 
*
004C:  MOVLW  49
004D:  MOVWF  04
004E:  BCF    03.7
004F:  MOVF   00,W
0050:  BTFSC  03.2
0051:  GOTO   060
0052:  MOVLW  01
0053:  MOVWF  78
0054:  CLRF   77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  DECFSZ 78,F
0058:  GOTO   054
0059:  MOVLW  4A
005A:  MOVWF  77
005B:  DECFSZ 77,F
005C:  GOTO   05B
005D:  GOTO   05E
005E:  DECFSZ 00,F
005F:  GOTO   052
0060:  RETURN
.................... #use standard_io(B) 
.................... #use standard_io(C) 
.................... #define use_portb_lcd True                   //Definiciones para colocar el LCD 
.................... #define use_portb_kbd True                   //y el teclado en el puerto B 
.................... #define bobina_1 PIN_D4                      //Puertos para los motores 
.................... #define bobina_2 PIN_D5 
.................... #define bobina_3 PIN_D6 
.................... #define bobina_4 PIN_D7 
.................... #include <lcd.c>                             //Librerías del LCD y Teclado 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0079:  MOVLW  0F
007A:  BSF    03.5
007B:  ANDWF  06,W
007C:  IORLW  F0
007D:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
007E:  BCF    03.5
007F:  BSF    06.2
....................    delay_cycles(1); 
0080:  NOP
....................    lcd_output_enable(1); 
0081:  BSF    06.0
....................    delay_cycles(1); 
0082:  NOP
....................    high = lcd_read_nibble(); 
0083:  CALL   06D
0084:  MOVF   78,W
0085:  MOVWF  50
....................        
....................    lcd_output_enable(0); 
0086:  BCF    06.0
....................    delay_cycles(1); 
0087:  NOP
....................    lcd_output_enable(1); 
0088:  BSF    06.0
....................    delay_us(1); 
0089:  NOP
....................    low = lcd_read_nibble(); 
008A:  CALL   06D
008B:  MOVF   78,W
008C:  MOVWF  4F
....................        
....................    lcd_output_enable(0); 
008D:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008E:  MOVLW  0F
008F:  BSF    03.5
0090:  ANDWF  06,W
0091:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0092:  BCF    03.5
0093:  SWAPF  50,W
0094:  MOVWF  77
0095:  MOVLW  F0
0096:  ANDWF  77,F
0097:  MOVF   77,W
0098:  IORWF  4F,W
0099:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
006D:  MOVF   06,W
006E:  MOVWF  77
006F:  SWAPF  06,W
0070:  ANDLW  0F
0071:  MOVWF  78
....................   #endif 
0072:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0061:  SWAPF  50,W
0062:  ANDLW  F0
0063:  MOVWF  77
0064:  MOVLW  0F
0065:  ANDWF  06,W
0066:  IORWF  77,W
0067:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_enable(1); 
0069:  BSF    06.0
....................    delay_us(2); 
006A:  GOTO   06B
....................    lcd_output_enable(0); 
006B:  BCF    06.0
006C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0073:  BSF    03.5
0074:  BCF    06.0
....................    lcd_rs_tris(); 
0075:  BCF    06.1
....................    lcd_rw_tris(); 
0076:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0077:  BCF    03.5
0078:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
009A:  MOVF   78,W
009B:  MOVWF  4F
009C:  BTFSC  4F.7
009D:  GOTO   079
....................    lcd_output_rs(address); 
009E:  BTFSS  4D.0
009F:  BCF    06.1
00A0:  BTFSC  4D.0
00A1:  BSF    06.1
....................    delay_cycles(1); 
00A2:  NOP
....................    lcd_output_rw(0); 
00A3:  BCF    06.2
....................    delay_cycles(1); 
00A4:  NOP
....................    lcd_output_enable(0); 
00A5:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
00A6:  SWAPF  4E,W
00A7:  MOVWF  4F
00A8:  MOVLW  0F
00A9:  ANDWF  4F,F
00AA:  MOVF   4F,W
00AB:  MOVWF  50
00AC:  CALL   061
....................    lcd_send_nibble(n & 0xf); 
00AD:  MOVF   4E,W
00AE:  ANDLW  0F
00AF:  MOVWF  4F
00B0:  MOVWF  50
00B1:  CALL   061
00B2:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00B3:  MOVLW  28
00B4:  MOVWF  3B
00B5:  MOVLW  0C
00B6:  MOVWF  3C
00B7:  MOVLW  01
00B8:  MOVWF  3D
00B9:  MOVLW  06
00BA:  MOVWF  3E
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00BB:  BCF    06.0
....................    lcd_output_rs(0); 
00BC:  BCF    06.1
....................    lcd_output_rw(0); 
00BD:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00BE:  MOVLW  0F
00BF:  BSF    03.5
00C0:  ANDWF  06,W
00C1:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00C2:  BCF    06.0
....................    lcd_rs_tris(); 
00C3:  BCF    06.1
....................    lcd_rw_tris(); 
00C4:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00C5:  MOVLW  0F
00C6:  BCF    03.5
00C7:  MOVWF  49
00C8:  CALL   04C
....................    for(i=1;i<=3;++i) 
00C9:  MOVLW  01
00CA:  MOVWF  3A
00CB:  MOVF   3A,W
00CC:  SUBLW  03
00CD:  BTFSS  03.0
00CE:  GOTO   0D7
....................    { 
....................        lcd_send_nibble(3); 
00CF:  MOVLW  03
00D0:  MOVWF  50
00D1:  CALL   061
....................        delay_ms(5); 
00D2:  MOVLW  05
00D3:  MOVWF  49
00D4:  CALL   04C
00D5:  INCF   3A,F
00D6:  GOTO   0CB
....................    } 
....................     
....................    lcd_send_nibble(2); 
00D7:  MOVLW  02
00D8:  MOVWF  50
00D9:  CALL   061
....................    delay_ms(5); 
00DA:  MOVLW  05
00DB:  MOVWF  49
00DC:  CALL   04C
....................    for(i=0;i<=3;++i) 
00DD:  CLRF   3A
00DE:  MOVF   3A,W
00DF:  SUBLW  03
00E0:  BTFSS  03.0
00E1:  GOTO   0EE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00E2:  MOVLW  3B
00E3:  ADDWF  3A,W
00E4:  MOVWF  04
00E5:  BCF    03.7
00E6:  MOVF   00,W
00E7:  MOVWF  3F
00E8:  CLRF   4D
00E9:  MOVF   3F,W
00EA:  MOVWF  4E
00EB:  CALL   073
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00EC:  INCF   3A,F
00ED:  GOTO   0DE
00EE:  BCF    0A.3
00EF:  BCF    0A.4
00F0:  GOTO   4F5 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
013F:  DECFSZ 4A,W
0140:  GOTO   142
0141:  GOTO   145
....................       address=LCD_LINE_TWO; 
0142:  MOVLW  40
0143:  MOVWF  4B
0144:  GOTO   146
....................    else 
....................       address=0; 
0145:  CLRF   4B
....................       
....................    address+=x-1; 
0146:  MOVLW  01
0147:  SUBWF  49,W
0148:  ADDWF  4B,F
....................    lcd_send_byte(0,0x80|address); 
0149:  MOVF   4B,W
014A:  IORLW  80
014B:  MOVWF  4C
014C:  CLRF   4D
014D:  MOVF   4C,W
014E:  MOVWF  4E
014F:  CALL   073
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0150:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0151:  MOVF   48,W
0152:  XORLW  07
0153:  BTFSC  03.2
0154:  GOTO   15F
0155:  XORLW  0B
0156:  BTFSC  03.2
0157:  GOTO   164
0158:  XORLW  06
0159:  BTFSC  03.2
015A:  GOTO   16C
015B:  XORLW  02
015C:  BTFSC  03.2
015D:  GOTO   172
015E:  GOTO   177
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
015F:  MOVLW  01
0160:  MOVWF  49
0161:  MOVWF  4A
0162:  CALL   13F
0163:  GOTO   17C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0164:  CLRF   4D
0165:  MOVLW  01
0166:  MOVWF  4E
0167:  CALL   073
....................                      delay_ms(2); 
0168:  MOVLW  02
0169:  MOVWF  49
016A:  CALL   04C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
016B:  GOTO   17C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
016C:  MOVLW  01
016D:  MOVWF  49
016E:  MOVLW  02
016F:  MOVWF  4A
0170:  CALL   13F
0171:  GOTO   17C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0172:  CLRF   4D
0173:  MOVLW  10
0174:  MOVWF  4E
0175:  CALL   073
0176:  GOTO   17C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0177:  MOVLW  01
0178:  MOVWF  4D
0179:  MOVF   48,W
017A:  MOVWF  4E
017B:  CALL   073
....................      #endif 
....................    } 
017C:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <kbd.c>  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
00F1:  BCF    0A.3
00F2:  BCF    0A.4
00F3:  GOTO   4F6 (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
04E9:  BCF    03.6
04EA:  CLRF   21
....................    static int1 kbd_down; 
04EB:  BCF    22.0
....................    static char last_key; 
04EC:  CLRF   23
....................    static BYTE col; 
04ED:  CLRF   24
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
01D3:  CLRF   45
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
01D4:  INCF   21,F
01D5:  MOVF   21,W
01D6:  SUBLW  21
01D7:  BTFSC  03.0
01D8:  GOTO   231
....................        switch (col) { 
01D9:  MOVF   24,W
01DA:  BTFSC  03.2
01DB:  GOTO   1E3
01DC:  XORLW  01
01DD:  BTFSC  03.2
01DE:  GOTO   1E9
01DF:  XORLW  03
01E0:  BTFSC  03.2
01E1:  GOTO   1EF
01E2:  GOTO   1F4
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
01E3:  MOVLW  DE
01E4:  BSF    03.5
01E5:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
01E6:  BCF    03.5
01E7:  MOVWF  06
....................                     break; 
01E8:  GOTO   1F4
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
01E9:  MOVLW  BE
01EA:  BSF    03.5
01EB:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
01EC:  BCF    03.5
01ED:  MOVWF  06
....................                     break; 
01EE:  GOTO   1F4
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
01EF:  MOVLW  7E
01F0:  BSF    03.5
01F1:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
01F2:  BCF    03.5
01F3:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
01F4:  BTFSS  22.0
01F5:  GOTO   200
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
01F6:  MOVF   06,W
01F7:  ANDLW  1E
01F8:  SUBLW  1E
01F9:  BTFSS  03.2
01FA:  GOTO   1FF
....................            kbd_down=FALSE; 
01FB:  BCF    22.0
....................            kchar=last_key; 
01FC:  MOVF   23,W
01FD:  MOVWF  45
....................            last_key='\0'; 
01FE:  CLRF   23
....................          } 
....................        } else { 
01FF:  GOTO   230
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
0200:  MOVF   06,W
0201:  ANDLW  1E
0202:  SUBLW  1E
0203:  BTFSC  03.2
0204:  GOTO   22B
....................              if((kbd & ROW0)==0) 
0205:  MOVF   06,W
0206:  ANDLW  02
0207:  BTFSS  03.2
0208:  GOTO   20B
....................                row=0; 
0209:  CLRF   46
020A:  GOTO   21F
....................              else if((kbd & ROW1)==0) 
020B:  MOVF   06,W
020C:  ANDLW  04
020D:  BTFSS  03.2
020E:  GOTO   212
....................                row=1; 
020F:  MOVLW  01
0210:  MOVWF  46
0211:  GOTO   21F
....................              else if((kbd & ROW2)==0) 
0212:  MOVF   06,W
0213:  ANDLW  08
0214:  BTFSS  03.2
0215:  GOTO   219
....................                row=2; 
0216:  MOVLW  02
0217:  MOVWF  46
0218:  GOTO   21F
....................              else if((kbd & ROW3)==0) 
0219:  MOVF   06,W
021A:  ANDLW  10
021B:  BTFSS  03.2
021C:  GOTO   21F
....................                row=3; 
021D:  MOVLW  03
021E:  MOVWF  46
....................              last_key =KEYS[row][col]; 
021F:  MOVF   46,W
0220:  MOVWF  4F
0221:  MOVLW  03
0222:  MOVWF  50
0223:  CALL   11A
0224:  MOVF   24,W
0225:  ADDWF  78,W
0226:  CALL   004
0227:  MOVWF  78
0228:  MOVWF  23
....................              kbd_down = TRUE; 
0229:  BSF    22.0
....................           } else { 
022A:  GOTO   230
....................              ++col; 
022B:  INCF   24,F
....................              if(col==3) 
022C:  MOVF   24,W
022D:  SUBLW  03
022E:  BTFSC  03.2
....................                col=0; 
022F:  CLRF   24
....................           } 
....................        } 
....................       kbd_call_count=0; 
0230:  CLRF   21
....................    } 
....................   set_tris_kbd(ALL_PINS); 
0231:  MOVLW  FE
0232:  BSF    03.5
0233:  MOVWF  06
....................   return(kchar); 
0234:  BCF    03.5
0235:  MOVF   45,W
0236:  MOVWF  78
0237:  RETURN
.................... } 
....................  
.................... #byte PORTC= 7                               //Definiciones 
.................... #byte PORTB= 6 
.................... #define LED1 PORTC,4 
.................... #define LED2 PORTC,7 
....................  
.................... char K;                                      //Variables Globales 
.................... int8 MIL,CEN,DEC,UNI,VAL; 
.................... int16 contra=9999;               //Variable entera para almacenar la contraseña 
.................... int8 sinal;                      //Variable para saber si tengo contraseña 
....................  
.................... void pasos_izquierda(int velocidad); 
.................... void pasos_derecha(int velocidad); 
.................... void pasos_off(void); 
....................  
.................... void teclado() 
.................... { 
....................    k=kbd_getc();                 //Llamar la función del teclado y almacenar 
0238:  CALL   1D3
0239:  MOVF   78,W
023A:  MOVWF  25
....................                                  //el valor digitado en una variable tipo 
....................                                  //carácter. Si no se oprime ninguna tecla el 
....................                                  //teclado retornara el carácter nulo.*/ 
....................    while(k=='\0')    //si no se oprime ninguna tecla sigue llamando al teclado. 
023B:  MOVF   25,F
023C:  BTFSS  03.2
023D:  GOTO   242
....................    { 
....................       k=kbd_getc(); 
023E:  CALL   1D3
023F:  MOVF   78,W
0240:  MOVWF  25
0241:  GOTO   23B
....................    } 
....................    if( (k!='\0')) 
0242:  MOVF   25,F
0243:  BTFSC  03.2
0244:  GOTO   27F
....................    { 
....................       if(K=='0')                             //Si K es igual a cero 
0245:  MOVF   25,W
0246:  SUBLW  30
0247:  BTFSC  03.2
....................          VAL=0;                              //Val es igual a cero 
0248:  CLRF   2A
....................       if(K=='1') 
0249:  MOVF   25,W
024A:  SUBLW  31
024B:  BTFSS  03.2
024C:  GOTO   24F
....................          VAL=1; 
024D:  MOVLW  01
024E:  MOVWF  2A
....................       if(K=='2') 
024F:  MOVF   25,W
0250:  SUBLW  32
0251:  BTFSS  03.2
0252:  GOTO   255
....................          VAL=2; 
0253:  MOVLW  02
0254:  MOVWF  2A
....................       if(K=='3') 
0255:  MOVF   25,W
0256:  SUBLW  33
0257:  BTFSS  03.2
0258:  GOTO   25B
....................          VAL=3; 
0259:  MOVLW  03
025A:  MOVWF  2A
....................       if(K=='4') 
025B:  MOVF   25,W
025C:  SUBLW  34
025D:  BTFSS  03.2
025E:  GOTO   261
....................          VAL=4; 
025F:  MOVLW  04
0260:  MOVWF  2A
....................       if(K=='5') 
0261:  MOVF   25,W
0262:  SUBLW  35
0263:  BTFSS  03.2
0264:  GOTO   267
....................          VAL=5; 
0265:  MOVLW  05
0266:  MOVWF  2A
....................       if(K=='6') 
0267:  MOVF   25,W
0268:  SUBLW  36
0269:  BTFSS  03.2
026A:  GOTO   26D
....................          VAL=6; 
026B:  MOVLW  06
026C:  MOVWF  2A
....................       if(K=='7') 
026D:  MOVF   25,W
026E:  SUBLW  37
026F:  BTFSS  03.2
0270:  GOTO   273
....................          VAL=7; 
0271:  MOVLW  07
0272:  MOVWF  2A
....................       if(K=='8') 
0273:  MOVF   25,W
0274:  SUBLW  38
0275:  BTFSS  03.2
0276:  GOTO   279
....................          VAL=8; 
0277:  MOVLW  08
0278:  MOVWF  2A
....................       if(K=='9') 
0279:  MOVF   25,W
027A:  SUBLW  39
027B:  BTFSS  03.2
027C:  GOTO   27F
....................          VAL=9; 
027D:  MOVLW  09
027E:  MOVWF  2A
....................    } 
027F:  RETURN
.................... } 
....................  
.................... void pedir_clave(void)                       //Rutina para pedir la clave 
.................... { 
....................    teclado(); 
0280:  CALL   238
....................    if((k!='#')&&(k!='*')) 
0281:  MOVF   25,W
0282:  SUBLW  23
0283:  BTFSC  03.2
0284:  GOTO   28E
0285:  MOVF   25,W
0286:  SUBLW  2A
0287:  BTFSC  03.2
0288:  GOTO   28E
....................    { 
....................       lcd_putc('*'); 
0289:  MOVLW  2A
028A:  MOVWF  48
028B:  CALL   151
....................       MIL=VAL; 
028C:  MOVF   2A,W
028D:  MOVWF  26
....................    } 
....................    if(k=='*' || k=='#') 
028E:  MOVF   25,W
028F:  SUBLW  2A
0290:  BTFSC  03.2
0291:  GOTO   295
0292:  MOVF   25,W
0293:  SUBLW  23
0294:  BTFSC  03.2
....................       return; 
0295:  GOTO   2D8
....................    teclado(); 
0296:  CALL   238
....................    if((k!='#')&&(k!='*')) 
0297:  MOVF   25,W
0298:  SUBLW  23
0299:  BTFSC  03.2
029A:  GOTO   2A4
029B:  MOVF   25,W
029C:  SUBLW  2A
029D:  BTFSC  03.2
029E:  GOTO   2A4
....................    { 
....................       lcd_putc('*'); 
029F:  MOVLW  2A
02A0:  MOVWF  48
02A1:  CALL   151
....................       CEN=VAL; 
02A2:  MOVF   2A,W
02A3:  MOVWF  27
....................    } 
....................    if(k=='*' || k=='#') 
02A4:  MOVF   25,W
02A5:  SUBLW  2A
02A6:  BTFSC  03.2
02A7:  GOTO   2AB
02A8:  MOVF   25,W
02A9:  SUBLW  23
02AA:  BTFSC  03.2
....................       return; 
02AB:  GOTO   2D8
....................    teclado(); 
02AC:  CALL   238
....................    if((k!='#')&&(k!='*')) 
02AD:  MOVF   25,W
02AE:  SUBLW  23
02AF:  BTFSC  03.2
02B0:  GOTO   2BA
02B1:  MOVF   25,W
02B2:  SUBLW  2A
02B3:  BTFSC  03.2
02B4:  GOTO   2BA
....................    { 
....................       lcd_putc('*'); 
02B5:  MOVLW  2A
02B6:  MOVWF  48
02B7:  CALL   151
....................       DEC=VAL; 
02B8:  MOVF   2A,W
02B9:  MOVWF  28
....................    } 
....................    if(k=='*' || k=='#') 
02BA:  MOVF   25,W
02BB:  SUBLW  2A
02BC:  BTFSC  03.2
02BD:  GOTO   2C1
02BE:  MOVF   25,W
02BF:  SUBLW  23
02C0:  BTFSC  03.2
....................       return; 
02C1:  GOTO   2D8
....................    teclado(); 
02C2:  CALL   238
....................    if((k!='#')&&(k!='*')) 
02C3:  MOVF   25,W
02C4:  SUBLW  23
02C5:  BTFSC  03.2
02C6:  GOTO   2D0
02C7:  MOVF   25,W
02C8:  SUBLW  2A
02C9:  BTFSC  03.2
02CA:  GOTO   2D0
....................    { 
....................       lcd_putc('*'); 
02CB:  MOVLW  2A
02CC:  MOVWF  48
02CD:  CALL   151
....................       UNI=VAL; 
02CE:  MOVF   2A,W
02CF:  MOVWF  29
....................    } 
....................    if(k=='*' || k=='#') 
02D0:  MOVF   25,W
02D1:  SUBLW  2A
02D2:  BTFSC  03.2
02D3:  GOTO   2D7
02D4:  MOVF   25,W
02D5:  SUBLW  23
02D6:  BTFSC  03.2
....................       return; 
02D7:  GOTO   2D8
02D8:  RETURN
.................... } 
....................  
.................... int validar_clave(void) 
02D9:  CLRF   46
02DA:  CLRF   45
.................... { 
....................    //Variables locales 
....................    int16 clave=0,m,c,d,u; 
....................     
....................    m=MIL*1000;                               //Convierto miles a numero 
02DB:  CLRF   52
02DC:  MOVF   26,W
02DD:  MOVWF  51
02DE:  MOVLW  03
02DF:  MOVWF  54
02E0:  MOVLW  E8
02E1:  MOVWF  53
02E2:  CALL   105
02E3:  MOVF   79,W
02E4:  MOVWF  48
02E5:  MOVF   78,W
02E6:  MOVWF  47
....................    //c=_mul(CEN,100);            //Alternativa para multiplicar int8*int8=int16 
....................    c=(int16)CEN*100;                   //Convierto centemas, haciendo un CAST 
02E7:  CLRF   50
02E8:  MOVF   27,W
02E9:  MOVWF  4F
02EA:  MOVF   50,W
02EB:  MOVWF  52
02EC:  MOVF   27,W
02ED:  MOVWF  51
02EE:  CLRF   54
02EF:  MOVLW  64
02F0:  MOVWF  53
02F1:  CALL   105
02F2:  MOVF   79,W
02F3:  MOVWF  4A
02F4:  MOVF   78,W
02F5:  MOVWF  49
....................    d=DEC*10;                                 //Convierto decenas a numero  
02F6:  MOVF   28,W
02F7:  MOVWF  4F
02F8:  MOVLW  0A
02F9:  MOVWF  50
02FA:  CALL   11A
02FB:  CLRF   4C
02FC:  MOVF   78,W
02FD:  MOVWF  4B
....................    u=UNI;                                    //Convierto unidades a numero  
02FE:  CLRF   4E
02FF:  MOVF   29,W
0300:  MOVWF  4D
....................     
....................    clave=m+c+d+u; 
0301:  MOVF   49,W
0302:  ADDWF  47,W
0303:  MOVWF  4F
0304:  MOVF   48,W
0305:  MOVWF  50
0306:  MOVF   4A,W
0307:  BTFSC  03.0
0308:  INCFSZ 4A,W
0309:  ADDWF  50,F
030A:  MOVF   4B,W
030B:  ADDWF  4F,F
030C:  MOVF   4C,W
030D:  BTFSC  03.0
030E:  INCFSZ 4C,W
030F:  ADDWF  50,F
0310:  MOVF   4D,W
0311:  ADDWF  4F,W
0312:  MOVWF  45
0313:  MOVF   50,W
0314:  MOVWF  46
0315:  MOVF   4E,W
0316:  BTFSC  03.0
0317:  INCFSZ 4E,W
0318:  ADDWF  46,F
....................    MIL=0;CEN=0;DEC=0;UNI=0;      //Borra lo último que fue digitado en teclado 
0319:  CLRF   26
031A:  CLRF   27
031B:  CLRF   28
031C:  CLRF   29
....................     
....................    if(clave==contra) //Si la clave es igual a la contraseña 
031D:  MOVF   2B,W
031E:  SUBWF  45,W
031F:  BTFSS  03.2
0320:  GOTO   329
0321:  MOVF   2C,W
0322:  SUBWF  46,W
0323:  BTFSS  03.2
0324:  GOTO   329
....................       return(1); 
0325:  MOVLW  01
0326:  MOVWF  78
0327:  GOTO   32B
0328:  GOTO   32B
....................    else 
....................       return(0); 
0329:  MOVLW  00
032A:  MOVWF  78
032B:  RETURN
.................... } 
....................  
.................... void cambio_clave(void) 
032C:  CLRF   3A
032D:  CLRF   3C
032E:  CLRF   3B
.................... { 
....................    int bandera=0; 
....................    int16 clave=0,m,c,d,u; 
....................    LCD_PUTC("\f"); 
032F:  MOVLW  14
0330:  BSF    03.6
0331:  MOVWF  0D
0332:  MOVLW  00
0333:  MOVWF  0F
0334:  BCF    03.6
0335:  CALL   17D
....................    LCD_GOTOXY(1,1); 
0336:  MOVLW  01
0337:  MOVWF  49
0338:  MOVWF  4A
0339:  CALL   13F
....................    LCD_PUTC("CLAVE ACTUAL"); 
033A:  MOVLW  15
033B:  BSF    03.6
033C:  MOVWF  0D
033D:  MOVLW  00
033E:  MOVWF  0F
033F:  BCF    03.6
0340:  CALL   17D
....................    LCD_GOTOXY(1,2);       
0341:  MOVLW  01
0342:  MOVWF  49
0343:  MOVLW  02
0344:  MOVWF  4A
0345:  CALL   13F
....................    pedir_clave(); //Llama la funcion de pedir la clave 
0346:  CALL   280
....................    bandera=validar_clave(); //Compruebo si la clave actual es correcta 
0347:  CALL   2D9
0348:  MOVF   78,W
0349:  MOVWF  3A
....................     
....................    if(bandera==1) 
034A:  DECFSZ 3A,W
034B:  GOTO   45D
....................    { 
....................       LCD_PUTC("\f"); 
034C:  MOVLW  1C
034D:  BSF    03.6
034E:  MOVWF  0D
034F:  MOVLW  00
0350:  MOVWF  0F
0351:  BCF    03.6
0352:  CALL   17D
....................       LCD_GOTOXY(1,1); 
0353:  MOVLW  01
0354:  MOVWF  49
0355:  MOVWF  4A
0356:  CALL   13F
....................       LCD_PUTC("CLAVE NUEVA  "); 
0357:  MOVLW  1D
0358:  BSF    03.6
0359:  MOVWF  0D
035A:  MOVLW  00
035B:  MOVWF  0F
035C:  BCF    03.6
035D:  CALL   17D
....................       LCD_GOTOXY(1,2);    
035E:  MOVLW  01
035F:  MOVWF  49
0360:  MOVLW  02
0361:  MOVWF  4A
0362:  CALL   13F
....................       teclado(); 
0363:  CALL   238
....................       if((k!='#')&&(k!='*')) 
0364:  MOVF   25,W
0365:  SUBLW  23
0366:  BTFSC  03.2
0367:  GOTO   371
0368:  MOVF   25,W
0369:  SUBLW  2A
036A:  BTFSC  03.2
036B:  GOTO   371
....................       { 
....................          lcd_putc('*'); 
036C:  MOVLW  2A
036D:  MOVWF  48
036E:  CALL   151
....................          MIL=VAL; 
036F:  MOVF   2A,W
0370:  MOVWF  26
....................       } 
....................       teclado(); 
0371:  CALL   238
....................       if((k!='#')&&(k!='*')) 
0372:  MOVF   25,W
0373:  SUBLW  23
0374:  BTFSC  03.2
0375:  GOTO   37F
0376:  MOVF   25,W
0377:  SUBLW  2A
0378:  BTFSC  03.2
0379:  GOTO   37F
....................       { 
....................          lcd_putc('*'); 
037A:  MOVLW  2A
037B:  MOVWF  48
037C:  CALL   151
....................          CEN=VAL; 
037D:  MOVF   2A,W
037E:  MOVWF  27
....................       } 
....................       teclado(); 
037F:  CALL   238
....................       if((k!='#')&&(k!='*')) 
0380:  MOVF   25,W
0381:  SUBLW  23
0382:  BTFSC  03.2
0383:  GOTO   38D
0384:  MOVF   25,W
0385:  SUBLW  2A
0386:  BTFSC  03.2
0387:  GOTO   38D
....................       { 
....................          lcd_putc('*'); 
0388:  MOVLW  2A
0389:  MOVWF  48
038A:  CALL   151
....................          DEC=VAL; 
038B:  MOVF   2A,W
038C:  MOVWF  28
....................       } 
....................       teclado(); 
038D:  CALL   238
....................       if((k!='#')&&(k!='*')) 
038E:  MOVF   25,W
038F:  SUBLW  23
0390:  BTFSC  03.2
0391:  GOTO   39B
0392:  MOVF   25,W
0393:  SUBLW  2A
0394:  BTFSC  03.2
0395:  GOTO   39B
....................       { 
....................          lcd_putc('*'); 
0396:  MOVLW  2A
0397:  MOVWF  48
0398:  CALL   151
....................          UNI=VAL; 
0399:  MOVF   2A,W
039A:  MOVWF  29
....................       } 
....................        
....................       m=MIL*1000;                              //Convierto miles a numero 
039B:  CLRF   52
039C:  MOVF   26,W
039D:  MOVWF  51
039E:  MOVLW  03
039F:  MOVWF  54
03A0:  MOVLW  E8
03A1:  MOVWF  53
03A2:  CALL   105
03A3:  MOVF   79,W
03A4:  MOVWF  3E
03A5:  MOVF   78,W
03A6:  MOVWF  3D
....................       c=CEN*10;            //Convierto centemas a numero y lo sumo al anterior 
03A7:  MOVF   27,W
03A8:  MOVWF  4F
03A9:  MOVLW  0A
03AA:  MOVWF  50
03AB:  CALL   11A
03AC:  CLRF   40
03AD:  MOVF   78,W
03AE:  MOVWF  3F
....................       c=c*10; 
03AF:  MOVF   40,W
03B0:  MOVWF  52
03B1:  MOVF   3F,W
03B2:  MOVWF  51
03B3:  CLRF   54
03B4:  MOVLW  0A
03B5:  MOVWF  53
03B6:  CALL   105
03B7:  MOVF   79,W
03B8:  MOVWF  40
03B9:  MOVF   78,W
03BA:  MOVWF  3F
....................       d=DEC*10;            //Convierto decenas a numero y lo sumo al anterior 
03BB:  MOVF   28,W
03BC:  MOVWF  4F
03BD:  MOVLW  0A
03BE:  MOVWF  50
03BF:  CALL   11A
03C0:  CLRF   42
03C1:  MOVF   78,W
03C2:  MOVWF  41
....................       u=UNI;               //Convierto unidades a numero y lo sumo al anterior 
03C3:  CLRF   44
03C4:  MOVF   29,W
03C5:  MOVWF  43
....................       clave=m+c+d+u; 
03C6:  MOVF   3F,W
03C7:  ADDWF  3D,W
03C8:  MOVWF  45
03C9:  MOVF   3E,W
03CA:  MOVWF  46
03CB:  MOVF   40,W
03CC:  BTFSC  03.0
03CD:  INCFSZ 40,W
03CE:  ADDWF  46,F
03CF:  MOVF   41,W
03D0:  ADDWF  45,F
03D1:  MOVF   42,W
03D2:  BTFSC  03.0
03D3:  INCFSZ 42,W
03D4:  ADDWF  46,F
03D5:  MOVF   43,W
03D6:  ADDWF  45,W
03D7:  MOVWF  3B
03D8:  MOVF   46,W
03D9:  MOVWF  3C
03DA:  MOVF   44,W
03DB:  BTFSC  03.0
03DC:  INCFSZ 44,W
03DD:  ADDWF  3C,F
....................        
....................       contra=clave; 
03DE:  MOVF   3C,W
03DF:  MOVWF  2C
03E0:  MOVF   3B,W
03E1:  MOVWF  2B
....................       WRITE_EEPROM(0,MIL); //Guarda en la eemprom posicion cero la nueva contraseña 
03E2:  MOVF   0B,W
03E3:  MOVWF  77
03E4:  BCF    0B.7
03E5:  BSF    03.6
03E6:  CLRF   0D
03E7:  BCF    03.6
03E8:  MOVF   26,W
03E9:  BSF    03.6
03EA:  MOVWF  0C
03EB:  BSF    03.5
03EC:  BCF    0C.7
03ED:  BSF    0C.2
03EE:  MOVLW  55
03EF:  MOVWF  0D
03F0:  MOVLW  AA
03F1:  MOVWF  0D
03F2:  BSF    0C.1
03F3:  BTFSC  0C.1
03F4:  GOTO   3F3
03F5:  BCF    0C.2
03F6:  MOVF   77,W
03F7:  BCF    03.5
03F8:  BCF    03.6
03F9:  IORWF  0B,F
....................       WRITE_EEPROM(1,CEN); 
03FA:  MOVF   0B,W
03FB:  MOVWF  77
03FC:  BCF    0B.7
03FD:  MOVLW  01
03FE:  BSF    03.6
03FF:  MOVWF  0D
0400:  BCF    03.6
0401:  MOVF   27,W
0402:  BSF    03.6
0403:  MOVWF  0C
0404:  BSF    03.5
0405:  BCF    0C.7
0406:  BSF    0C.2
0407:  MOVLW  55
0408:  MOVWF  0D
0409:  MOVLW  AA
040A:  MOVWF  0D
040B:  BSF    0C.1
040C:  BTFSC  0C.1
040D:  GOTO   40C
040E:  BCF    0C.2
040F:  MOVF   77,W
0410:  BCF    03.5
0411:  BCF    03.6
0412:  IORWF  0B,F
....................       WRITE_EEPROM(2,DEC); 
0413:  MOVF   0B,W
0414:  MOVWF  77
0415:  BCF    0B.7
0416:  MOVLW  02
0417:  BSF    03.6
0418:  MOVWF  0D
0419:  BCF    03.6
041A:  MOVF   28,W
041B:  BSF    03.6
041C:  MOVWF  0C
041D:  BSF    03.5
041E:  BCF    0C.7
041F:  BSF    0C.2
0420:  MOVLW  55
0421:  MOVWF  0D
0422:  MOVLW  AA
0423:  MOVWF  0D
0424:  BSF    0C.1
0425:  BTFSC  0C.1
0426:  GOTO   425
0427:  BCF    0C.2
0428:  MOVF   77,W
0429:  BCF    03.5
042A:  BCF    03.6
042B:  IORWF  0B,F
....................       WRITE_EEPROM(3,UNI); 
042C:  MOVF   0B,W
042D:  MOVWF  77
042E:  BCF    0B.7
042F:  MOVLW  03
0430:  BSF    03.6
0431:  MOVWF  0D
0432:  BCF    03.6
0433:  MOVF   29,W
0434:  BSF    03.6
0435:  MOVWF  0C
0436:  BSF    03.5
0437:  BCF    0C.7
0438:  BSF    0C.2
0439:  MOVLW  55
043A:  MOVWF  0D
043B:  MOVLW  AA
043C:  MOVWF  0D
043D:  BSF    0C.1
043E:  BTFSC  0C.1
043F:  GOTO   43E
0440:  BCF    0C.2
0441:  MOVF   77,W
0442:  BCF    03.5
0443:  BCF    03.6
0444:  IORWF  0B,F
....................       WRITE_EEPROM(4,12); //Guardo un 12 en la posicion 1 de la EEPROM, para decir que tengo 
0445:  MOVF   0B,W
0446:  MOVWF  77
0447:  BCF    0B.7
0448:  MOVLW  04
0449:  BSF    03.6
044A:  MOVWF  0D
044B:  MOVLW  0C
044C:  MOVWF  0C
044D:  BSF    03.5
044E:  BCF    0C.7
044F:  BSF    0C.2
0450:  MOVLW  55
0451:  MOVWF  0D
0452:  MOVLW  AA
0453:  MOVWF  0D
0454:  BSF    0C.1
0455:  BTFSC  0C.1
0456:  GOTO   455
0457:  BCF    0C.2
0458:  MOVF   77,W
0459:  BCF    03.5
045A:  BCF    03.6
045B:  IORWF  0B,F
....................       //una contraseña guardada 
....................    } 
045C:  GOTO   480
....................    else 
....................    { 
....................       LCD_PUTC("\f"); 
045D:  MOVLW  24
045E:  BSF    03.6
045F:  MOVWF  0D
0460:  MOVLW  00
0461:  MOVWF  0F
0462:  BCF    03.6
0463:  CALL   17D
....................       LCD_GOTOXY(1,2); 
0464:  MOVLW  01
0465:  MOVWF  49
0466:  MOVLW  02
0467:  MOVWF  4A
0468:  CALL   13F
....................       LCD_PUTC(" CLAVE INVALIDA "); 
0469:  MOVLW  25
046A:  BSF    03.6
046B:  MOVWF  0D
046C:  MOVLW  00
046D:  MOVWF  0F
046E:  BCF    03.6
046F:  CALL   17D
....................       BIT_SET(LED2); 
0470:  BSF    07.7
....................       DELAY_MS(4000); 
0471:  MOVLW  10
0472:  MOVWF  45
0473:  MOVLW  FA
0474:  MOVWF  49
0475:  CALL   04C
0476:  DECFSZ 45,F
0477:  GOTO   473
....................       BIT_CLEAR(LED2); 
0478:  BCF    07.7
....................       LCD_PUTC("\f"); 
0479:  MOVLW  2E
047A:  BSF    03.6
047B:  MOVWF  0D
047C:  MOVLW  00
047D:  MOVWF  0F
047E:  BCF    03.6
047F:  CALL   17D
....................    } 
0480:  RETURN
.................... } 
....................  
.................... void pasos_izquierda(int velocidad) 
.................... { 
....................    output_low(bobina_1); 
....................    output_low(bobina_2); 
....................    output_high(bobina_3); 
....................    output_high(bobina_4); 
....................    delay_ms(velocidad); 
....................     
....................    output_low(bobina_1); 
....................    output_high(bobina_2); 
....................    output_high(bobina_3); 
....................    output_low(bobina_4); 
....................    delay_ms(velocidad); 
....................     
....................    output_high(bobina_1); 
....................    output_high(bobina_2); 
....................    output_low(bobina_3); 
....................    output_low(bobina_4); 
....................    delay_ms(velocidad); 
....................     
....................    output_high(bobina_1); 
....................    output_low(bobina_2); 
....................    output_low(bobina_3); 
....................    output_high(bobina_4); 
....................    delay_ms(velocidad); 
.................... } 
....................  
.................... void pasos_derecha(int velocidad) 
.................... { 
....................    output_high(bobina_1); 
0481:  BSF    03.5
0482:  BCF    08.4
0483:  BCF    03.5
0484:  BSF    08.4
....................    output_high(bobina_2); 
0485:  BSF    03.5
0486:  BCF    08.5
0487:  BCF    03.5
0488:  BSF    08.5
....................    output_low(bobina_3); 
0489:  BSF    03.5
048A:  BCF    08.6
048B:  BCF    03.5
048C:  BCF    08.6
....................    output_low(bobina_4); 
048D:  BSF    03.5
048E:  BCF    08.7
048F:  BCF    03.5
0490:  BCF    08.7
....................    delay_ms(velocidad); 
0491:  MOVF   3A,W
0492:  MOVWF  49
0493:  CALL   04C
....................     
....................    output_low(bobina_1); 
0494:  BSF    03.5
0495:  BCF    08.4
0496:  BCF    03.5
0497:  BCF    08.4
....................    output_high(bobina_2); 
0498:  BSF    03.5
0499:  BCF    08.5
049A:  BCF    03.5
049B:  BSF    08.5
....................    output_high(bobina_3); 
049C:  BSF    03.5
049D:  BCF    08.6
049E:  BCF    03.5
049F:  BSF    08.6
....................    output_low(bobina_4); 
04A0:  BSF    03.5
04A1:  BCF    08.7
04A2:  BCF    03.5
04A3:  BCF    08.7
....................    delay_ms(velocidad); 
04A4:  MOVF   3A,W
04A5:  MOVWF  49
04A6:  CALL   04C
....................     
....................    output_low(bobina_1); 
04A7:  BSF    03.5
04A8:  BCF    08.4
04A9:  BCF    03.5
04AA:  BCF    08.4
....................    output_low(bobina_2); 
04AB:  BSF    03.5
04AC:  BCF    08.5
04AD:  BCF    03.5
04AE:  BCF    08.5
....................    output_high(bobina_3); 
04AF:  BSF    03.5
04B0:  BCF    08.6
04B1:  BCF    03.5
04B2:  BSF    08.6
....................    output_high(bobina_4); 
04B3:  BSF    03.5
04B4:  BCF    08.7
04B5:  BCF    03.5
04B6:  BSF    08.7
....................    delay_ms(velocidad); 
04B7:  MOVF   3A,W
04B8:  MOVWF  49
04B9:  CALL   04C
....................     
....................    output_high(bobina_1); 
04BA:  BSF    03.5
04BB:  BCF    08.4
04BC:  BCF    03.5
04BD:  BSF    08.4
....................    output_low(bobina_2); 
04BE:  BSF    03.5
04BF:  BCF    08.5
04C0:  BCF    03.5
04C1:  BCF    08.5
....................    output_low(bobina_3); 
04C2:  BSF    03.5
04C3:  BCF    08.6
04C4:  BCF    03.5
04C5:  BCF    08.6
....................    output_high(bobina_4); 
04C6:  BSF    03.5
04C7:  BCF    08.7
04C8:  BCF    03.5
04C9:  BSF    08.7
....................    delay_ms(velocidad); 
04CA:  MOVF   3A,W
04CB:  MOVWF  49
04CC:  CALL   04C
04CD:  BCF    0A.3
04CE:  BCF    0A.4
04CF:  GOTO   5AB (RETURN)
.................... } 
....................  
.................... void pasos_off(void) 
.................... { 
....................    output_low(bobina_1); 
*
00F4:  BSF    03.5
00F5:  BCF    08.4
00F6:  BCF    03.5
00F7:  BCF    08.4
....................    output_low(bobina_2); 
00F8:  BSF    03.5
00F9:  BCF    08.5
00FA:  BCF    03.5
00FB:  BCF    08.5
....................    output_low(bobina_3); 
00FC:  BSF    03.5
00FD:  BCF    08.6
00FE:  BCF    03.5
00FF:  BCF    08.6
....................    output_low(bobina_4); 
0100:  BSF    03.5
0101:  BCF    08.7
0102:  BCF    03.5
0103:  BCF    08.7
0104:  RETURN
.................... } 
....................  
.................... void main() 
*
04D0:  MOVF   03,W
04D1:  ANDLW  1F
04D2:  MOVWF  03
04D3:  MOVLW  FF
04D4:  MOVWF  20
04D5:  MOVLW  27
04D6:  MOVWF  2C
04D7:  MOVLW  0F
04D8:  MOVWF  2B
04D9:  BSF    03.5
04DA:  BSF    03.6
04DB:  MOVF   09,W
04DC:  ANDLW  C0
04DD:  MOVWF  09
04DE:  BCF    03.6
04DF:  BCF    1F.4
04E0:  BCF    1F.5
04E1:  MOVLW  00
04E2:  BSF    03.6
04E3:  MOVWF  08
04E4:  BCF    03.5
04E5:  CLRF   07
04E6:  CLRF   08
04E7:  CLRF   09
04E8:  BCF    03.7
.................... { 
....................    int16 m,c,d,u;                            //Variables Locales 
....................    INT8 m1,c1,d1,u1; 
....................     
....................    SET_TRIS_C(0B00000000);                   //Puerto C como Salida 
*
04EE:  MOVLW  00
04EF:  BSF    03.5
04F0:  MOVWF  07
04F1:  BCF    03.5
04F2:  MOVWF  20
....................    PORTC=0;                                  //Limpia Puerto C 
04F3:  CLRF   07
....................    lcd_init();                               //Inicializa el LCD 
04F4:  GOTO   0B3
....................    kbd_init();                               //Inicializa el Teclado 
04F5:  GOTO   0F1
....................     
....................                               //Configura las Resistencias PULL-UP del Puerto B 
....................    port_b_pullups(0xFF);                     //PIC 16F887 
04F6:  MOVLW  FF
04F7:  BSF    03.5
04F8:  MOVWF  15
04F9:  BCF    01.7
....................     
....................    sinal=READ_EEPROM(4);       //Averiguo si tengo una contraseña guardada o no 
04FA:  MOVLW  04
04FB:  BCF    03.5
04FC:  BSF    03.6
04FD:  MOVWF  0D
04FE:  BSF    03.5
04FF:  BCF    0C.7
0500:  BSF    0C.0
0501:  BCF    03.5
0502:  MOVF   0C,W
0503:  BCF    03.6
0504:  MOVWF  2D
....................     
....................    pasos_off(); 
0505:  CALL   0F4
....................     
....................    if(sinal!=12) 
0506:  MOVF   2D,W
0507:  SUBLW  0C
0508:  BTFSC  03.2
0509:  GOTO   50F
....................       contra=9999; 
050A:  MOVLW  27
050B:  MOVWF  2C
050C:  MOVLW  0F
050D:  MOVWF  2B
050E:  GOTO   574
....................    else 
....................    { 
....................       m1=READ_EEPROM(0);                     //Lee los datos del EEPROM 
050F:  BSF    03.6
0510:  CLRF   0D
0511:  BSF    03.5
0512:  BCF    0C.7
0513:  BSF    0C.0
0514:  BCF    03.5
0515:  MOVF   0C,W
0516:  BCF    03.6
0517:  MOVWF  36
....................       c1=READ_EEPROM(1);  
0518:  MOVLW  01
0519:  BSF    03.6
051A:  MOVWF  0D
051B:  BSF    03.5
051C:  BCF    0C.7
051D:  BSF    0C.0
051E:  BCF    03.5
051F:  MOVF   0C,W
0520:  BCF    03.6
0521:  MOVWF  37
....................       d1=READ_EEPROM(2);  
0522:  MOVLW  02
0523:  BSF    03.6
0524:  MOVWF  0D
0525:  BSF    03.5
0526:  BCF    0C.7
0527:  BSF    0C.0
0528:  BCF    03.5
0529:  MOVF   0C,W
052A:  BCF    03.6
052B:  MOVWF  38
....................       u1=READ_EEPROM(3); 
052C:  MOVLW  03
052D:  BSF    03.6
052E:  MOVWF  0D
052F:  BSF    03.5
0530:  BCF    0C.7
0531:  BSF    0C.0
0532:  BCF    03.5
0533:  MOVF   0C,W
0534:  BCF    03.6
0535:  MOVWF  39
....................        
....................       m=m1*1000;                             //Convierto miles a numero 
0536:  CLRF   52
0537:  MOVF   36,W
0538:  MOVWF  51
0539:  MOVLW  03
053A:  MOVWF  54
053B:  MOVLW  E8
053C:  MOVWF  53
053D:  CALL   105
053E:  MOVF   79,W
053F:  MOVWF  2F
0540:  MOVF   78,W
0541:  MOVWF  2E
....................       //c=_mul(c1,100);          //Alternativa para multiplicar int8*int8=int16 
....................       c=(int16)c1*100;                 //Convierto centemas, haciendo un CAST 
0542:  CLRF   3B
0543:  MOVF   37,W
0544:  MOVWF  3A
0545:  MOVF   3B,W
0546:  MOVWF  52
0547:  MOVF   37,W
0548:  MOVWF  51
0549:  CLRF   54
054A:  MOVLW  64
054B:  MOVWF  53
054C:  CALL   105
054D:  MOVF   79,W
054E:  MOVWF  31
054F:  MOVF   78,W
0550:  MOVWF  30
....................       d=d1*10;                               //Convierto decenas a numero  
0551:  MOVF   38,W
0552:  MOVWF  4F
0553:  MOVLW  0A
0554:  MOVWF  50
0555:  CALL   11A
0556:  CLRF   33
0557:  MOVF   78,W
0558:  MOVWF  32
....................       u=u1;                                  //Convierto unidades a numero  
0559:  CLRF   35
055A:  MOVF   39,W
055B:  MOVWF  34
....................       contra=m+c+d+u; 
055C:  MOVF   30,W
055D:  ADDWF  2E,W
055E:  MOVWF  3A
055F:  MOVF   2F,W
0560:  MOVWF  3B
0561:  MOVF   31,W
0562:  BTFSC  03.0
0563:  INCFSZ 31,W
0564:  ADDWF  3B,F
0565:  MOVF   32,W
0566:  ADDWF  3A,F
0567:  MOVF   33,W
0568:  BTFSC  03.0
0569:  INCFSZ 33,W
056A:  ADDWF  3B,F
056B:  MOVF   34,W
056C:  ADDWF  3A,W
056D:  MOVWF  2B
056E:  MOVF   3B,W
056F:  MOVWF  2C
0570:  MOVF   35,W
0571:  BTFSC  03.0
0572:  INCFSZ 35,W
0573:  ADDWF  2C,F
....................    } 
....................     
....................    while(TRUE) 
....................    { 
....................       pasos_off(); 
0574:  CALL   0F4
....................        
....................       LCD_PUTC("\f"); 
0575:  MOVLW  2F
0576:  BSF    03.6
0577:  MOVWF  0D
0578:  MOVLW  00
0579:  MOVWF  0F
057A:  BCF    03.6
057B:  CALL   17D
....................       LCD_GOTOXY(1,1); 
057C:  MOVLW  01
057D:  MOVWF  49
057E:  MOVWF  4A
057F:  CALL   13F
....................       LCD_PUTC(" DIGITE CLAVE "); 
0580:  MOVLW  30
0581:  BSF    03.6
0582:  MOVWF  0D
0583:  MOVLW  00
0584:  MOVWF  0F
0585:  BCF    03.6
0586:  CALL   17D
....................       LCD_GOTOXY(1,2); 
0587:  MOVLW  01
0588:  MOVWF  49
0589:  MOVLW  02
058A:  MOVWF  4A
058B:  CALL   13F
....................       DELAY_MS(1000); 
058C:  MOVLW  04
058D:  MOVWF  3A
058E:  MOVLW  FA
058F:  MOVWF  49
0590:  CALL   04C
0591:  DECFSZ 3A,F
0592:  GOTO   58E
....................       pedir_clave();                      //Llama la funcion de pedir la clave 
0593:  CALL   280
....................        
....................       if(k=='*') 
0594:  MOVF   25,W
0595:  SUBLW  2A
0596:  BTFSS  03.2
0597:  GOTO   59A
....................          cambio_clave(); 
0598:  CALL   32C
0599:  GOTO   5E3
....................       else 
....................       { 
....................          while((k!='#')) 
059A:  MOVF   25,W
059B:  SUBLW  23
059C:  BTFSC  03.2
059D:  GOTO   5A4
....................          { 
....................             TECLADO(); 
059E:  CALL   238
....................             if(k=='*') 
059F:  MOVF   25,W
05A0:  SUBLW  2A
05A1:  BTFSC  03.2
....................             cambio_clave(); 
05A2:  CALL   32C
05A3:  GOTO   59A
....................          } 
....................          if(validar_clave())                 //Validación clave 
05A4:  CALL   2D9
05A5:  MOVF   78,F
05A6:  BTFSC  03.2
05A7:  GOTO   5C7
....................          { 
....................             pasos_derecha(80); 
05A8:  MOVLW  50
05A9:  MOVWF  3A
05AA:  GOTO   481
....................              
....................             LCD_PUTC("\f"); //Se borra LCD 
05AB:  MOVLW  38
05AC:  BSF    03.6
05AD:  MOVWF  0D
05AE:  MOVLW  00
05AF:  MOVWF  0F
05B0:  BCF    03.6
05B1:  CALL   17D
....................                LCD_GOTOXY(1,1);//Se ubica en la posición 1,1 
05B2:  MOVLW  01
05B3:  MOVWF  49
05B4:  MOVWF  4A
05B5:  CALL   13F
....................             LCD_PUTC(" CLAVE CORRECTA "); 
05B6:  MOVLW  39
05B7:  BSF    03.6
05B8:  MOVWF  0D
05B9:  MOVLW  00
05BA:  MOVWF  0F
05BB:  BCF    03.6
05BC:  CALL   17D
....................             BIT_SET(LED1); 
05BD:  BSF    07.4
....................             DELAY_MS(2000); 
05BE:  MOVLW  08
05BF:  MOVWF  3A
05C0:  MOVLW  FA
05C1:  MOVWF  49
05C2:  CALL   04C
05C3:  DECFSZ 3A,F
05C4:  GOTO   5C0
....................             BIT_CLEAR(LED1); 
05C5:  BCF    07.4
....................          } 
05C6:  GOTO   5E3
....................          else 
....................          { 
....................             LCD_PUTC("\f"); 
05C7:  MOVLW  42
05C8:  BSF    03.6
05C9:  MOVWF  0D
05CA:  MOVLW  00
05CB:  MOVWF  0F
05CC:  BCF    03.6
05CD:  CALL   17D
....................             LCD_GOTOXY(1,2); 
05CE:  MOVLW  01
05CF:  MOVWF  49
05D0:  MOVLW  02
05D1:  MOVWF  4A
05D2:  CALL   13F
....................             LCD_PUTC(" CLAVE INVALIDA "); 
05D3:  MOVLW  43
05D4:  BSF    03.6
05D5:  MOVWF  0D
05D6:  MOVLW  00
05D7:  MOVWF  0F
05D8:  BCF    03.6
05D9:  CALL   17D
....................             BIT_SET(LED2); 
05DA:  BSF    07.7
....................             DELAY_MS(4000); 
05DB:  MOVLW  10
05DC:  MOVWF  3A
05DD:  MOVLW  FA
05DE:  MOVWF  49
05DF:  CALL   04C
05E0:  DECFSZ 3A,F
05E1:  GOTO   5DD
....................             BIT_CLEAR(LED2); 
05E2:  BCF    07.7
....................          } 
....................       } 
05E3:  GOTO   574
....................    } 
.................... } 
05E4:  SLEEP

Configuration Fuses:
   Word  1: 2CF1   XT NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
