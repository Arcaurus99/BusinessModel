CCS PCM C Compiler, Version 5.015, 5967               01-oct.-21 19:14

               Filename:   D:\arc\UNIVERSIDAD\Unicauca\6to Semestre\Circuitos Digitales II\FinalBusinessModel\Code\UC2\Code_2.lst

               ROM used:   1557 words (19%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           38 (10%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4B3
0003:  NOP
.................... #include <16f887.h> 
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 0C,10
0005:  DATA 4F,28
0006:  DATA C3,24
0007:  DATA 4F,27
0008:  DATA A0,12
0009:  DATA 69,00
000A:  DATA 45,37
000B:  DATA F6,34
000C:  DATA 61,37
000D:  DATA E4,37
000E:  DATA 3D,10
000F:  DATA A5,18
0010:  DATA 44,00
0011:  DATA 0C,00
0012:  DATA 0C,2A
0013:  DATA C5,26
0014:  DATA D0,22
0015:  DATA D2,20
0016:  DATA D4,2A
0017:  DATA D2,20
0018:  DATA 00,01
0019:  DATA C3,1E
001A:  DATA A0,12
001B:  DATA 66,10
001C:  DATA 20,10
001D:  DATA 20,00
001E:  DATA 0C,00
001F:  DATA 0C,2A
0020:  DATA C5,26
0021:  DATA D0,22
0022:  DATA D2,20
0023:  DATA D4,2A
0024:  DATA D2,20
0025:  DATA 00,01
0026:  DATA C3,1E
0027:  DATA A0,12
0028:  DATA 66,10
0029:  DATA 20,10
002A:  DATA 20,00
002B:  DATA 0C,00
*
010F:  MOVF   0B,W
0110:  MOVWF  28
0111:  BCF    0B.7
0112:  BSF    03.5
0113:  BSF    03.6
0114:  BSF    0C.7
0115:  BSF    0C.0
0116:  NOP
0117:  NOP
0118:  BCF    03.5
0119:  BCF    03.6
011A:  BTFSC  28.7
011B:  BSF    0B.7
011C:  BTFSC  03.0
011D:  GOTO   146
011E:  BSF    03.6
011F:  MOVF   0C,W
0120:  ANDLW  7F
0121:  BCF    03.6
0122:  MOVWF  28
0123:  BSF    03.6
0124:  MOVF   0D,W
0125:  BCF    03.6
0126:  MOVWF  29
0127:  BSF    03.6
0128:  MOVF   0F,W
0129:  BCF    03.6
012A:  MOVWF  2A
012B:  MOVF   28,W
012C:  MOVWF  34
012D:  CALL   0E3
012E:  MOVF   29,W
012F:  BSF    03.6
0130:  MOVWF  0D
0131:  BCF    03.6
0132:  MOVF   2A,W
0133:  BSF    03.6
0134:  MOVWF  0F
0135:  BCF    03.6
0136:  MOVF   0B,W
0137:  MOVWF  2B
0138:  BCF    0B.7
0139:  BSF    03.5
013A:  BSF    03.6
013B:  BSF    0C.7
013C:  BSF    0C.0
013D:  NOP
013E:  NOP
013F:  BCF    03.5
0140:  BCF    03.6
0141:  BTFSC  2B.7
0142:  BSF    0B.7
0143:  DECFSZ 27,F
0144:  GOTO   146
0145:  GOTO   165
0146:  BSF    03.6
0147:  RLF    0C,W
0148:  RLF    0E,W
0149:  ANDLW  7F
014A:  BCF    03.6
014B:  MOVWF  28
014C:  BSF    03.6
014D:  MOVF   0D,W
014E:  BCF    03.6
014F:  MOVWF  29
0150:  BSF    03.6
0151:  MOVF   0F,W
0152:  BCF    03.6
0153:  MOVWF  2A
0154:  MOVF   28,W
0155:  MOVWF  34
0156:  CALL   0E3
0157:  MOVF   29,W
0158:  BSF    03.6
0159:  MOVWF  0D
015A:  BCF    03.6
015B:  MOVF   2A,W
015C:  BSF    03.6
015D:  MOVWF  0F
015E:  INCF   0D,F
015F:  BTFSC  03.2
0160:  INCF   0F,F
0161:  BCF    03.0
0162:  BCF    03.6
0163:  DECFSZ 27,F
0164:  GOTO   10F
0165:  RETURN
0166:  MOVF   2E,W
0167:  CLRF   78
0168:  SUBWF  2D,W
0169:  BTFSC  03.0
016A:  GOTO   16E
016B:  MOVF   2D,W
016C:  MOVWF  77
016D:  GOTO   17A
016E:  CLRF   77
016F:  MOVLW  08
0170:  MOVWF  2F
0171:  RLF    2D,F
0172:  RLF    77,F
0173:  MOVF   2E,W
0174:  SUBWF  77,W
0175:  BTFSC  03.0
0176:  MOVWF  77
0177:  RLF    78,F
0178:  DECFSZ 2F,F
0179:  GOTO   171
017A:  RETURN
017B:  MOVLW  20
017C:  BTFSS  28.4
017D:  MOVLW  30
017E:  MOVWF  29
017F:  MOVF   27,W
0180:  MOVWF  77
0181:  BTFSS  27.7
0182:  GOTO   18B
0183:  COMF   77,F
0184:  INCF   77,F
0185:  MOVF   77,W
0186:  MOVWF  27
0187:  MOVLW  2D
0188:  MOVWF  29
0189:  BSF    28.7
018A:  BSF    28.0
018B:  MOVF   27,W
018C:  MOVWF  2D
018D:  MOVLW  64
018E:  MOVWF  2E
018F:  CALL   166
0190:  MOVF   77,W
0191:  MOVWF  27
0192:  MOVLW  30
0193:  ADDWF  78,W
0194:  MOVWF  2A
0195:  MOVF   27,W
0196:  MOVWF  2D
0197:  MOVLW  0A
0198:  MOVWF  2E
0199:  CALL   166
019A:  MOVLW  30
019B:  ADDWF  77,W
019C:  MOVWF  2C
019D:  MOVLW  30
019E:  ADDWF  78,W
019F:  MOVWF  2B
01A0:  MOVF   29,W
01A1:  MOVWF  77
01A2:  MOVLW  30
01A3:  SUBWF  2A,W
01A4:  BTFSC  03.2
01A5:  GOTO   1AA
01A6:  BSF    28.1
01A7:  BTFSC  28.7
01A8:  BSF    28.2
01A9:  GOTO   1BE
01AA:  MOVF   29,W
01AB:  MOVWF  2A
01AC:  MOVLW  20
01AD:  MOVWF  29
01AE:  MOVLW  30
01AF:  SUBWF  2B,W
01B0:  BTFSC  03.2
01B1:  GOTO   1B6
01B2:  BSF    28.0
01B3:  BTFSC  28.7
01B4:  BSF    28.1
01B5:  GOTO   1BE
01B6:  BTFSS  03.2
01B7:  BSF    28.0
01B8:  BTFSS  03.2
01B9:  GOTO   1BE
01BA:  MOVF   2A,W
01BB:  MOVWF  2B
01BC:  MOVLW  20
01BD:  MOVWF  2A
01BE:  BTFSC  28.2
01BF:  GOTO   1C5
01C0:  BTFSC  28.1
01C1:  GOTO   1C8
01C2:  BTFSC  28.0
01C3:  GOTO   1CB
01C4:  GOTO   1CE
01C5:  MOVF   29,W
01C6:  MOVWF  34
01C7:  CALL   0E3
01C8:  MOVF   2A,W
01C9:  MOVWF  34
01CA:  CALL   0E3
01CB:  MOVF   2B,W
01CC:  MOVWF  34
01CD:  CALL   0E3
01CE:  MOVF   2C,W
01CF:  MOVWF  34
01D0:  CALL   0E3
01D1:  RETURN
01D2:  MOVF   0B,W
01D3:  MOVWF  27
01D4:  BCF    0B.7
01D5:  BSF    03.5
01D6:  BSF    03.6
01D7:  BSF    0C.7
01D8:  BSF    0C.0
01D9:  NOP
01DA:  NOP
01DB:  BCF    03.5
01DC:  BCF    03.6
01DD:  BTFSC  27.7
01DE:  BSF    0B.7
01DF:  BSF    03.6
01E0:  MOVF   0C,W
01E1:  ANDLW  7F
01E2:  BTFSC  03.2
01E3:  GOTO   226
01E4:  BCF    03.6
01E5:  MOVWF  27
01E6:  BSF    03.6
01E7:  MOVF   0D,W
01E8:  BCF    03.6
01E9:  MOVWF  28
01EA:  BSF    03.6
01EB:  MOVF   0F,W
01EC:  BCF    03.6
01ED:  MOVWF  29
01EE:  MOVF   27,W
01EF:  MOVWF  34
01F0:  CALL   0E3
01F1:  MOVF   28,W
01F2:  BSF    03.6
01F3:  MOVWF  0D
01F4:  BCF    03.6
01F5:  MOVF   29,W
01F6:  BSF    03.6
01F7:  MOVWF  0F
01F8:  BCF    03.6
01F9:  MOVF   0B,W
01FA:  MOVWF  2A
01FB:  BCF    0B.7
01FC:  BSF    03.5
01FD:  BSF    03.6
01FE:  BSF    0C.7
01FF:  BSF    0C.0
0200:  NOP
0201:  NOP
0202:  BCF    03.5
0203:  BCF    03.6
0204:  BTFSC  2A.7
0205:  BSF    0B.7
0206:  BSF    03.6
0207:  RLF    0C,W
0208:  RLF    0E,W
0209:  ANDLW  7F
020A:  BTFSC  03.2
020B:  GOTO   226
020C:  BCF    03.6
020D:  MOVWF  27
020E:  BSF    03.6
020F:  MOVF   0D,W
0210:  BCF    03.6
0211:  MOVWF  28
0212:  BSF    03.6
0213:  MOVF   0F,W
0214:  BCF    03.6
0215:  MOVWF  29
0216:  MOVF   27,W
0217:  MOVWF  34
0218:  CALL   0E3
0219:  MOVF   28,W
021A:  BSF    03.6
021B:  MOVWF  0D
021C:  BCF    03.6
021D:  MOVF   29,W
021E:  BSF    03.6
021F:  MOVWF  0F
0220:  INCF   0D,F
0221:  BTFSC  03.2
0222:  INCF   0F,F
0223:  BCF    03.6
0224:  GOTO   1D2
0225:  BSF    03.6
0226:  BCF    03.6
0227:  RETURN
0228:  MOVLW  8E
0229:  MOVWF  77
022A:  MOVF   28,W
022B:  MOVWF  78
022C:  MOVF   27,W
022D:  MOVWF  79
022E:  CLRF   7A
022F:  MOVF   78,F
0230:  BTFSS  03.2
0231:  GOTO   23C
0232:  MOVF   79,W
0233:  MOVWF  78
0234:  CLRF   79
0235:  MOVLW  08
0236:  SUBWF  77,F
0237:  MOVF   78,F
0238:  BTFSS  03.2
0239:  GOTO   23C
023A:  CLRF   77
023B:  GOTO   244
023C:  BCF    03.0
023D:  BTFSC  78.7
023E:  GOTO   243
023F:  RLF    79,F
0240:  RLF    78,F
0241:  DECF   77,F
0242:  GOTO   23C
0243:  BCF    78.7
0244:  RETURN
0245:  MOVF   27,W
0246:  BTFSC  03.2
0247:  GOTO   30A
0248:  MOVWF  33
0249:  MOVF   2B,W
024A:  BTFSC  03.2
024B:  GOTO   30A
024C:  SUBWF  33,F
024D:  BTFSS  03.0
024E:  GOTO   254
024F:  MOVLW  7F
0250:  ADDWF  33,F
0251:  BTFSC  03.0
0252:  GOTO   30A
0253:  GOTO   25A
0254:  MOVLW  81
0255:  SUBWF  33,F
0256:  BTFSS  03.0
0257:  GOTO   30A
0258:  BTFSC  03.2
0259:  GOTO   30A
025A:  MOVF   33,W
025B:  MOVWF  77
025C:  CLRF   78
025D:  CLRF   79
025E:  CLRF   7A
025F:  CLRF   32
0260:  MOVF   28,W
0261:  MOVWF  31
0262:  BSF    31.7
0263:  MOVF   29,W
0264:  MOVWF  30
0265:  MOVF   2A,W
0266:  MOVWF  2F
0267:  MOVLW  19
0268:  MOVWF  33
0269:  MOVF   2E,W
026A:  SUBWF  2F,F
026B:  BTFSC  03.0
026C:  GOTO   27D
026D:  MOVLW  01
026E:  SUBWF  30,F
026F:  BTFSC  03.0
0270:  GOTO   27D
0271:  SUBWF  31,F
0272:  BTFSC  03.0
0273:  GOTO   27D
0274:  SUBWF  32,F
0275:  BTFSC  03.0
0276:  GOTO   27D
0277:  INCF   32,F
0278:  INCF   31,F
0279:  INCF   30,F
027A:  MOVF   2E,W
027B:  ADDWF  2F,F
027C:  GOTO   2AF
027D:  MOVF   2D,W
027E:  SUBWF  30,F
027F:  BTFSC  03.0
0280:  GOTO   298
0281:  MOVLW  01
0282:  SUBWF  31,F
0283:  BTFSC  03.0
0284:  GOTO   298
0285:  SUBWF  32,F
0286:  BTFSC  03.0
0287:  GOTO   298
0288:  INCF   32,F
0289:  INCF   31,F
028A:  MOVF   2D,W
028B:  ADDWF  30,F
028C:  MOVF   2E,W
028D:  ADDWF  2F,F
028E:  BTFSS  03.0
028F:  GOTO   2AF
0290:  INCF   30,F
0291:  BTFSS  03.2
0292:  GOTO   2AF
0293:  INCF   31,F
0294:  BTFSS  03.2
0295:  GOTO   2AF
0296:  INCF   32,F
0297:  GOTO   2AF
0298:  MOVF   2C,W
0299:  IORLW  80
029A:  SUBWF  31,F
029B:  BTFSC  03.0
029C:  GOTO   2AE
029D:  MOVLW  01
029E:  SUBWF  32,F
029F:  BTFSC  03.0
02A0:  GOTO   2AE
02A1:  INCF   32,F
02A2:  MOVF   2C,W
02A3:  IORLW  80
02A4:  ADDWF  31,F
02A5:  MOVF   2D,W
02A6:  ADDWF  30,F
02A7:  BTFSS  03.0
02A8:  GOTO   28C
02A9:  INCF   31,F
02AA:  BTFSS  03.2
02AB:  GOTO   28C
02AC:  INCF   32,F
02AD:  GOTO   28C
02AE:  BSF    7A.0
02AF:  DECFSZ 33,F
02B0:  GOTO   2B2
02B1:  GOTO   2BD
02B2:  BCF    03.0
02B3:  RLF    2F,F
02B4:  RLF    30,F
02B5:  RLF    31,F
02B6:  RLF    32,F
02B7:  BCF    03.0
02B8:  RLF    7A,F
02B9:  RLF    79,F
02BA:  RLF    78,F
02BB:  RLF    34,F
02BC:  GOTO   269
02BD:  BTFSS  34.0
02BE:  GOTO   2C5
02BF:  BCF    03.0
02C0:  RRF    78,F
02C1:  RRF    79,F
02C2:  RRF    7A,F
02C3:  RRF    34,F
02C4:  GOTO   2C8
02C5:  DECF   77,F
02C6:  BTFSC  03.2
02C7:  GOTO   30A
02C8:  BTFSC  34.7
02C9:  GOTO   2F1
02CA:  BCF    03.0
02CB:  RLF    2F,F
02CC:  RLF    30,F
02CD:  RLF    31,F
02CE:  RLF    32,F
02CF:  MOVF   2E,W
02D0:  SUBWF  2F,F
02D1:  BTFSC  03.0
02D2:  GOTO   2DD
02D3:  MOVLW  01
02D4:  SUBWF  30,F
02D5:  BTFSC  03.0
02D6:  GOTO   2DD
02D7:  SUBWF  31,F
02D8:  BTFSC  03.0
02D9:  GOTO   2DD
02DA:  SUBWF  32,F
02DB:  BTFSS  03.0
02DC:  GOTO   300
02DD:  MOVF   2D,W
02DE:  SUBWF  30,F
02DF:  BTFSC  03.0
02E0:  GOTO   2E8
02E1:  MOVLW  01
02E2:  SUBWF  31,F
02E3:  BTFSC  03.0
02E4:  GOTO   2E8
02E5:  SUBWF  32,F
02E6:  BTFSS  03.0
02E7:  GOTO   300
02E8:  MOVF   2C,W
02E9:  IORLW  80
02EA:  SUBWF  31,F
02EB:  BTFSC  03.0
02EC:  GOTO   2F1
02ED:  MOVLW  01
02EE:  SUBWF  32,F
02EF:  BTFSS  03.0
02F0:  GOTO   300
02F1:  INCF   7A,F
02F2:  BTFSS  03.2
02F3:  GOTO   300
02F4:  INCF   79,F
02F5:  BTFSS  03.2
02F6:  GOTO   300
02F7:  INCF   78,F
02F8:  BTFSS  03.2
02F9:  GOTO   300
02FA:  INCF   77,F
02FB:  BTFSC  03.2
02FC:  GOTO   30A
02FD:  RRF    78,F
02FE:  RRF    79,F
02FF:  RRF    7A,F
0300:  MOVF   28,W
0301:  MOVWF  33
0302:  MOVF   2C,W
0303:  XORWF  33,F
0304:  BTFSS  33.7
0305:  GOTO   308
0306:  BSF    78.7
0307:  GOTO   30E
0308:  BCF    78.7
0309:  GOTO   30E
030A:  CLRF   77
030B:  CLRF   78
030C:  CLRF   79
030D:  CLRF   7A
030E:  BCF    0A.3
030F:  BCF    0A.4
0310:  GOTO   553 (RETURN)
0311:  BTFSC  03.1
0312:  GOTO   316
0313:  MOVLW  3C
0314:  MOVWF  04
0315:  BCF    03.7
0316:  CLRF   77
0317:  CLRF   78
0318:  CLRF   79
0319:  CLRF   7A
031A:  CLRF   3C
031B:  CLRF   3D
031C:  CLRF   3E
031D:  CLRF   3F
031E:  MOVF   3B,W
031F:  IORWF  3A,W
0320:  IORWF  39,W
0321:  IORWF  38,W
0322:  BTFSC  03.2
0323:  GOTO   354
0324:  MOVLW  20
0325:  MOVWF  40
0326:  BCF    03.0
0327:  RLF    34,F
0328:  RLF    35,F
0329:  RLF    36,F
032A:  RLF    37,F
032B:  RLF    3C,F
032C:  RLF    3D,F
032D:  RLF    3E,F
032E:  RLF    3F,F
032F:  MOVF   3B,W
0330:  SUBWF  3F,W
0331:  BTFSS  03.2
0332:  GOTO   33D
0333:  MOVF   3A,W
0334:  SUBWF  3E,W
0335:  BTFSS  03.2
0336:  GOTO   33D
0337:  MOVF   39,W
0338:  SUBWF  3D,W
0339:  BTFSS  03.2
033A:  GOTO   33D
033B:  MOVF   38,W
033C:  SUBWF  3C,W
033D:  BTFSS  03.0
033E:  GOTO   34E
033F:  MOVF   38,W
0340:  SUBWF  3C,F
0341:  MOVF   39,W
0342:  BTFSS  03.0
0343:  INCFSZ 39,W
0344:  SUBWF  3D,F
0345:  MOVF   3A,W
0346:  BTFSS  03.0
0347:  INCFSZ 3A,W
0348:  SUBWF  3E,F
0349:  MOVF   3B,W
034A:  BTFSS  03.0
034B:  INCFSZ 3B,W
034C:  SUBWF  3F,F
034D:  BSF    03.0
034E:  RLF    77,F
034F:  RLF    78,F
0350:  RLF    79,F
0351:  RLF    7A,F
0352:  DECFSZ 40,F
0353:  GOTO   326
0354:  MOVF   3C,W
0355:  MOVWF  00
0356:  INCF   04,F
0357:  MOVF   3D,W
0358:  MOVWF  00
0359:  INCF   04,F
035A:  MOVF   3E,W
035B:  MOVWF  00
035C:  INCF   04,F
035D:  MOVF   3F,W
035E:  MOVWF  00
035F:  RETURN
0360:  MOVF   04,W
0361:  MOVWF  2C
0362:  MOVF   2B,W
0363:  MOVWF  2E
0364:  BTFSC  03.2
0365:  GOTO   3F2
0366:  MOVF   2A,W
0367:  MOVWF  37
0368:  MOVF   29,W
0369:  MOVWF  36
036A:  MOVF   28,W
036B:  MOVWF  35
036C:  MOVF   27,W
036D:  MOVWF  34
036E:  CLRF   3B
036F:  CLRF   3A
0370:  MOVLW  20
0371:  MOVWF  39
0372:  MOVLW  82
0373:  MOVWF  38
0374:  MOVF   34,W
0375:  BTFSC  03.2
0376:  GOTO   3E4
0377:  MOVWF  3C
0378:  MOVF   38,W
0379:  BTFSC  03.2
037A:  GOTO   3E4
037B:  ADDWF  3C,F
037C:  BTFSC  03.0
037D:  GOTO   385
037E:  MOVLW  7F
037F:  SUBWF  3C,F
0380:  BTFSS  03.0
0381:  GOTO   3E4
0382:  BTFSC  03.2
0383:  GOTO   3E4
0384:  GOTO   389
0385:  MOVLW  81
0386:  ADDWF  3C,F
0387:  BTFSC  03.0
0388:  GOTO   3E4
0389:  MOVF   3C,W
038A:  MOVWF  77
038B:  CLRF   78
038C:  CLRF   79
038D:  CLRF   7A
038E:  MOVF   35,W
038F:  MOVWF  40
0390:  BSF    40.7
0391:  MOVF   36,W
0392:  MOVWF  3F
0393:  MOVF   37,W
0394:  MOVWF  3E
0395:  MOVLW  18
0396:  MOVWF  3C
0397:  CLRF   3D
0398:  BTFSS  3E.0
0399:  GOTO   3B2
039A:  MOVF   3B,W
039B:  ADDWF  7A,F
039C:  BTFSS  03.0
039D:  GOTO   3A4
039E:  INCF   79,F
039F:  BTFSS  03.2
03A0:  GOTO   3A4
03A1:  INCF   78,F
03A2:  BTFSC  03.2
03A3:  BSF    3D.7
03A4:  MOVF   3A,W
03A5:  ADDWF  79,F
03A6:  BTFSS  03.0
03A7:  GOTO   3AB
03A8:  INCF   78,F
03A9:  BTFSC  03.2
03AA:  BSF    3D.7
03AB:  MOVF   39,W
03AC:  MOVWF  36
03AD:  BSF    36.7
03AE:  MOVF   36,W
03AF:  ADDWF  78,F
03B0:  BTFSC  03.0
03B1:  BSF    3D.7
03B2:  RLF    3D,F
03B3:  RRF    78,F
03B4:  RRF    79,F
03B5:  RRF    7A,F
03B6:  RRF    40,F
03B7:  RRF    3F,F
03B8:  RRF    3E,F
03B9:  BCF    03.0
03BA:  DECFSZ 3C,F
03BB:  GOTO   397
03BC:  MOVLW  01
03BD:  ADDWF  77,F
03BE:  BTFSC  03.0
03BF:  GOTO   3E4
03C0:  BTFSC  78.7
03C1:  GOTO   3C9
03C2:  RLF    40,F
03C3:  RLF    7A,F
03C4:  RLF    79,F
03C5:  RLF    78,F
03C6:  DECF   77,F
03C7:  BTFSC  03.2
03C8:  GOTO   3E4
03C9:  BTFSS  40.7
03CA:  GOTO   3DA
03CB:  INCF   7A,F
03CC:  BTFSS  03.2
03CD:  GOTO   3DA
03CE:  INCF   79,F
03CF:  BTFSS  03.2
03D0:  GOTO   3DA
03D1:  INCF   78,F
03D2:  BTFSS  03.2
03D3:  GOTO   3DA
03D4:  RRF    78,F
03D5:  RRF    79,F
03D6:  RRF    7A,F
03D7:  INCF   77,F
03D8:  BTFSC  03.2
03D9:  GOTO   3E4
03DA:  MOVF   35,W
03DB:  MOVWF  3D
03DC:  MOVF   39,W
03DD:  XORWF  3D,F
03DE:  BTFSS  3D.7
03DF:  GOTO   3E2
03E0:  BSF    78.7
03E1:  GOTO   3E8
03E2:  BCF    78.7
03E3:  GOTO   3E8
03E4:  CLRF   77
03E5:  CLRF   78
03E6:  CLRF   79
03E7:  CLRF   7A
03E8:  MOVF   7A,W
03E9:  MOVWF  2A
03EA:  MOVF   79,W
03EB:  MOVWF  29
03EC:  MOVF   78,W
03ED:  MOVWF  28
03EE:  MOVF   77,W
03EF:  MOVWF  27
03F0:  DECFSZ 2E,F
03F1:  GOTO   366
03F2:  MOVF   2A,W
03F3:  MOVWF  37
03F4:  MOVF   29,W
03F5:  MOVWF  36
03F6:  MOVF   28,W
03F7:  MOVWF  35
03F8:  MOVF   27,W
03F9:  MOVWF  34
03FA:  MOVF   34,W
03FB:  SUBLW  B6
03FC:  MOVWF  34
03FD:  CLRF   7A
03FE:  MOVF   35,W
03FF:  MOVWF  38
0400:  BSF    35.7
0401:  BCF    03.0
0402:  RRF    35,F
0403:  RRF    36,F
0404:  RRF    37,F
0405:  RRF    7A,F
0406:  RRF    79,F
0407:  RRF    78,F
0408:  RRF    77,F
0409:  DECFSZ 34,F
040A:  GOTO   401
040B:  BTFSS  38.7
040C:  GOTO   418
040D:  COMF   77,F
040E:  COMF   78,F
040F:  COMF   79,F
0410:  COMF   7A,F
0411:  INCF   77,F
0412:  BTFSC  03.2
0413:  INCF   78,F
0414:  BTFSC  03.2
0415:  INCF   79,F
0416:  BTFSC  03.2
0417:  INCF   7A,F
0418:  MOVF   7A,W
0419:  MOVWF  2A
041A:  MOVF   79,W
041B:  MOVWF  29
041C:  MOVF   78,W
041D:  MOVWF  28
041E:  MOVF   77,W
041F:  MOVWF  27
0420:  BTFSS  2A.7
0421:  GOTO   42F
0422:  DECF   2C,F
0423:  BSF    2C.5
0424:  COMF   27,F
0425:  COMF   28,F
0426:  COMF   29,F
0427:  COMF   2A,F
0428:  INCF   27,F
0429:  BTFSC  03.2
042A:  INCF   28,F
042B:  BTFSC  03.2
042C:  INCF   29,F
042D:  BTFSC  03.2
042E:  INCF   2A,F
042F:  MOVLW  3B
0430:  MOVWF  33
0431:  MOVLW  9A
0432:  MOVWF  32
0433:  MOVLW  CA
0434:  MOVWF  31
0435:  CLRF   30
0436:  MOVLW  0A
0437:  MOVWF  2E
0438:  MOVF   2B,W
0439:  BTFSC  03.2
043A:  INCF   2C,F
043B:  BSF    03.1
043C:  MOVLW  27
043D:  MOVWF  04
043E:  BCF    03.7
043F:  MOVF   2A,W
0440:  MOVWF  37
0441:  MOVF   29,W
0442:  MOVWF  36
0443:  MOVF   28,W
0444:  MOVWF  35
0445:  MOVF   27,W
0446:  MOVWF  34
0447:  MOVF   33,W
0448:  MOVWF  3B
0449:  MOVF   32,W
044A:  MOVWF  3A
044B:  MOVF   31,W
044C:  MOVWF  39
044D:  MOVF   30,W
044E:  MOVWF  38
044F:  CALL   311
0450:  MOVF   78,W
0451:  MOVF   77,F
0452:  BTFSS  03.2
0453:  GOTO   467
0454:  INCF   2B,W
0455:  SUBWF  2E,W
0456:  BTFSC  03.2
0457:  GOTO   467
0458:  MOVF   2C,W
0459:  BTFSC  03.2
045A:  GOTO   469
045B:  ANDLW  0F
045C:  SUBWF  2E,W
045D:  BTFSC  03.2
045E:  GOTO   461
045F:  BTFSC  03.0
0460:  GOTO   499
0461:  BTFSC  2C.7
0462:  GOTO   499
0463:  BTFSC  2C.6
0464:  GOTO   469
0465:  MOVLW  20
0466:  GOTO   495
0467:  MOVLW  20
0468:  ANDWF  2C,F
0469:  BTFSS  2C.5
046A:  GOTO   477
046B:  BCF    2C.5
046C:  MOVF   2B,W
046D:  BTFSS  03.2
046E:  DECF   2C,F
046F:  MOVF   77,W
0470:  MOVWF  2C
0471:  MOVLW  2D
0472:  MOVWF  34
0473:  CALL   0E3
0474:  MOVF   2C,W
0475:  MOVWF  77
0476:  CLRF   2C
0477:  MOVF   2B,W
0478:  SUBWF  2E,W
0479:  BTFSS  03.2
047A:  GOTO   485
047B:  MOVF   77,W
047C:  MOVWF  2C
047D:  MOVLW  2E
047E:  MOVWF  34
047F:  CALL   0E3
0480:  MOVF   2C,W
0481:  MOVWF  77
0482:  MOVLW  20
0483:  ANDWF  2C,F
0484:  MOVLW  00
0485:  MOVLW  30
0486:  BTFSS  2C.5
0487:  GOTO   495
0488:  BCF    2C.5
0489:  MOVF   2B,W
048A:  BTFSS  03.2
048B:  DECF   2C,F
048C:  MOVF   77,W
048D:  MOVWF  2C
048E:  MOVLW  2D
048F:  MOVWF  34
0490:  CALL   0E3
0491:  MOVF   2C,W
0492:  MOVWF  77
0493:  CLRF   2C
0494:  MOVLW  30
0495:  ADDWF  77,F
0496:  MOVF   77,W
0497:  MOVWF  34
0498:  CALL   0E3
0499:  BCF    03.1
049A:  MOVF   33,W
049B:  MOVWF  37
049C:  MOVF   32,W
049D:  MOVWF  36
049E:  MOVF   31,W
049F:  MOVWF  35
04A0:  MOVF   30,W
04A1:  MOVWF  34
04A2:  CLRF   3B
04A3:  CLRF   3A
04A4:  CLRF   39
04A5:  MOVLW  0A
04A6:  MOVWF  38
04A7:  CALL   311
04A8:  MOVF   7A,W
04A9:  MOVWF  33
04AA:  MOVF   79,W
04AB:  MOVWF  32
04AC:  MOVF   78,W
04AD:  MOVWF  31
04AE:  MOVF   77,W
04AF:  MOVWF  30
04B0:  DECFSZ 2E,F
04B1:  GOTO   43B
04B2:  RETURN
....................  
.................... #list 
....................  
.................... #fuses xt,nowdt 
.................... #use delay(crystal=4000000) 
*
002C:  MOVLW  35
002D:  MOVWF  04
002E:  BCF    03.7
002F:  MOVF   00,W
0030:  BTFSC  03.2
0031:  GOTO   040
0032:  MOVLW  01
0033:  MOVWF  78
0034:  CLRF   77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  DECFSZ 78,F
0038:  GOTO   034
0039:  MOVLW  4A
003A:  MOVWF  77
003B:  DECFSZ 77,F
003C:  GOTO   03B
003D:  GOTO   03E
003E:  DECFSZ 00,F
003F:  GOTO   032
0040:  RETURN
.................... #use rs232(baud=57600,xmit=pin_c6,rcv=pin_c7,bits=8) 
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0059:  MOVLW  0F
005A:  BSF    03.5
005B:  ANDWF  08,W
005C:  IORLW  F0
005D:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
005E:  BCF    03.5
005F:  BSF    08.2
....................    delay_cycles(1); 
0060:  NOP
....................    lcd_output_enable(1); 
0061:  BSF    08.0
....................    delay_cycles(1); 
0062:  NOP
....................    high = lcd_read_nibble(); 
0063:  CALL   04D
0064:  MOVF   78,W
0065:  MOVWF  3C
....................        
....................    lcd_output_enable(0); 
0066:  BCF    08.0
....................    delay_cycles(1); 
0067:  NOP
....................    lcd_output_enable(1); 
0068:  BSF    08.0
....................    delay_us(1); 
0069:  NOP
....................    low = lcd_read_nibble(); 
006A:  CALL   04D
006B:  MOVF   78,W
006C:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
006D:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006E:  MOVLW  0F
006F:  BSF    03.5
0070:  ANDWF  08,W
0071:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0072:  BCF    03.5
0073:  SWAPF  3C,W
0074:  MOVWF  77
0075:  MOVLW  F0
0076:  ANDWF  77,F
0077:  MOVF   77,W
0078:  IORWF  3B,W
0079:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
004D:  MOVF   08,W
004E:  MOVWF  77
004F:  SWAPF  08,W
0050:  ANDLW  0F
0051:  MOVWF  78
....................   #endif 
0052:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0041:  SWAPF  3C,W
0042:  ANDLW  F0
0043:  MOVWF  77
0044:  MOVLW  0F
0045:  ANDWF  08,W
0046:  IORWF  77,W
0047:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0048:  NOP
....................    lcd_output_enable(1); 
0049:  BSF    08.0
....................    delay_us(2); 
004A:  GOTO   04B
....................    lcd_output_enable(0); 
004B:  BCF    08.0
004C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0053:  BSF    03.5
0054:  BCF    08.0
....................    lcd_rs_tris(); 
0055:  BCF    08.1
....................    lcd_rw_tris(); 
0056:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0057:  BCF    03.5
0058:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
007A:  MOVF   78,W
007B:  MOVWF  3B
007C:  BTFSC  3B.7
007D:  GOTO   059
....................    lcd_output_rs(address); 
007E:  BTFSS  39.0
007F:  BCF    08.1
0080:  BTFSC  39.0
0081:  BSF    08.1
....................    delay_cycles(1); 
0082:  NOP
....................    lcd_output_rw(0); 
0083:  BCF    08.2
....................    delay_cycles(1); 
0084:  NOP
....................    lcd_output_enable(0); 
0085:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0086:  SWAPF  3A,W
0087:  MOVWF  3B
0088:  MOVLW  0F
0089:  ANDWF  3B,F
008A:  MOVF   3B,W
008B:  MOVWF  3C
008C:  CALL   041
....................    lcd_send_nibble(n & 0xf); 
008D:  MOVF   3A,W
008E:  ANDLW  0F
008F:  MOVWF  3B
0090:  MOVWF  3C
0091:  CALL   041
0092:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0093:  MOVLW  28
0094:  MOVWF  28
0095:  MOVLW  0C
0096:  MOVWF  29
0097:  MOVLW  01
0098:  MOVWF  2A
0099:  MOVLW  06
009A:  MOVWF  2B
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
009B:  BCF    08.0
....................    lcd_output_rs(0); 
009C:  BCF    08.1
....................    lcd_output_rw(0); 
009D:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
009E:  MOVLW  0F
009F:  BSF    03.5
00A0:  ANDWF  08,W
00A1:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00A2:  BCF    08.0
....................    lcd_rs_tris(); 
00A3:  BCF    08.1
....................    lcd_rw_tris(); 
00A4:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
00A5:  MOVLW  0F
00A6:  BCF    03.5
00A7:  MOVWF  35
00A8:  CALL   02C
....................    for(i=1;i<=3;++i) 
00A9:  MOVLW  01
00AA:  MOVWF  27
00AB:  MOVF   27,W
00AC:  SUBLW  03
00AD:  BTFSS  03.0
00AE:  GOTO   0B7
....................    { 
....................        lcd_send_nibble(3); 
00AF:  MOVLW  03
00B0:  MOVWF  3C
00B1:  CALL   041
....................        delay_ms(5); 
00B2:  MOVLW  05
00B3:  MOVWF  35
00B4:  CALL   02C
00B5:  INCF   27,F
00B6:  GOTO   0AB
....................    } 
....................     
....................    lcd_send_nibble(2); 
00B7:  MOVLW  02
00B8:  MOVWF  3C
00B9:  CALL   041
....................    delay_ms(5); 
00BA:  MOVLW  05
00BB:  MOVWF  35
00BC:  CALL   02C
....................    for(i=0;i<=3;++i) 
00BD:  CLRF   27
00BE:  MOVF   27,W
00BF:  SUBLW  03
00C0:  BTFSS  03.0
00C1:  GOTO   0CE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C2:  MOVLW  28
00C3:  ADDWF  27,W
00C4:  MOVWF  04
00C5:  BCF    03.7
00C6:  MOVF   00,W
00C7:  MOVWF  2C
00C8:  CLRF   39
00C9:  MOVF   2C,W
00CA:  MOVWF  3A
00CB:  CALL   053
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CC:  INCF   27,F
00CD:  GOTO   0BE
00CE:  BCF    0A.3
00CF:  BCF    0A.4
00D0:  GOTO   4D7 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00D1:  DECFSZ 36,W
00D2:  GOTO   0D4
00D3:  GOTO   0D7
....................       address=LCD_LINE_TWO; 
00D4:  MOVLW  40
00D5:  MOVWF  37
00D6:  GOTO   0D8
....................    else 
....................       address=0; 
00D7:  CLRF   37
....................       
....................    address+=x-1; 
00D8:  MOVLW  01
00D9:  SUBWF  35,W
00DA:  ADDWF  37,F
....................    lcd_send_byte(0,0x80|address); 
00DB:  MOVF   37,W
00DC:  IORLW  80
00DD:  MOVWF  38
00DE:  CLRF   39
00DF:  MOVF   38,W
00E0:  MOVWF  3A
00E1:  CALL   053
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E2:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00E3:  MOVF   34,W
00E4:  XORLW  07
00E5:  BTFSC  03.2
00E6:  GOTO   0F1
00E7:  XORLW  0B
00E8:  BTFSC  03.2
00E9:  GOTO   0F6
00EA:  XORLW  06
00EB:  BTFSC  03.2
00EC:  GOTO   0FE
00ED:  XORLW  02
00EE:  BTFSC  03.2
00EF:  GOTO   104
00F0:  GOTO   109
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F1:  MOVLW  01
00F2:  MOVWF  35
00F3:  MOVWF  36
00F4:  CALL   0D1
00F5:  GOTO   10E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F6:  CLRF   39
00F7:  MOVLW  01
00F8:  MOVWF  3A
00F9:  CALL   053
....................                      delay_ms(2); 
00FA:  MOVLW  02
00FB:  MOVWF  35
00FC:  CALL   02C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00FD:  GOTO   10E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00FE:  MOVLW  01
00FF:  MOVWF  35
0100:  MOVLW  02
0101:  MOVWF  36
0102:  CALL   0D1
0103:  GOTO   10E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0104:  CLRF   39
0105:  MOVLW  10
0106:  MOVWF  3A
0107:  CALL   053
0108:  GOTO   10E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0109:  MOVLW  01
010A:  MOVWF  39
010B:  MOVF   34,W
010C:  MOVWF  3A
010D:  CALL   053
....................      #endif 
....................    } 
010E:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #byte PORTC= 7 
.................... #define LED_G PORTC,3 
.................... #define LED_Y PORTC,4 
.................... #define LED_R PORTC,5 
....................  
.................... int opc; 
.................... float tem; 
.................... int valor; 
....................  
....................  
.................... // ---------- MAIN ---------- 
.................... void main() 
*
04B3:  MOVF   03,W
04B4:  ANDLW  1F
04B5:  MOVWF  03
04B6:  BSF    03.5
04B7:  BSF    03.6
04B8:  BSF    07.3
04B9:  MOVLW  10
04BA:  BCF    03.6
04BB:  MOVWF  19
04BC:  MOVLW  00
04BD:  MOVWF  1A
04BE:  MOVLW  A6
04BF:  MOVWF  18
04C0:  MOVLW  90
04C1:  BCF    03.5
04C2:  MOVWF  18
04C3:  MOVLW  FF
04C4:  MOVWF  26
04C5:  BSF    03.5
04C6:  BSF    03.6
04C7:  MOVF   09,W
04C8:  ANDLW  C0
04C9:  MOVWF  09
04CA:  BCF    03.6
04CB:  BCF    1F.4
04CC:  BCF    1F.5
04CD:  MOVLW  00
04CE:  BSF    03.6
04CF:  MOVWF  08
04D0:  BCF    03.5
04D1:  CLRF   07
04D2:  CLRF   08
04D3:  CLRF   09
04D4:  BCF    03.7
.................... { 
....................    while(TRUE) 
....................    { 
....................       lcd_init(); 
04D5:  BCF    03.6
04D6:  GOTO   093
....................       opc=getc(); 
04D7:  BTFSS  0C.5
04D8:  GOTO   4D7
04D9:  MOVF   1A,W
04DA:  MOVWF  20
....................  
....................       switch(opc) 
04DB:  MOVF   20,W
04DC:  XORLW  01
04DD:  BTFSC  03.2
04DE:  GOTO   4E6
04DF:  XORLW  03
04E0:  BTFSC  03.2
04E1:  GOTO   52F
04E2:  XORLW  01
04E3:  BTFSC  03.2
04E4:  GOTO   5AF
04E5:  GOTO   613
....................       { 
....................          case 1: 
....................             output_high(pin_c3); 
04E6:  BCF    26.3
04E7:  MOVF   26,W
04E8:  BSF    03.5
04E9:  MOVWF  07
04EA:  BCF    03.5
04EB:  BSF    07.3
....................             for(valor=0;valor<=10;valor++) 
04EC:  CLRF   25
04ED:  MOVF   25,W
04EE:  SUBLW  0A
04EF:  BTFSS  03.0
04F0:  GOTO   521
....................             { 
....................                putc(valor);  
04F1:  MOVF   25,W
04F2:  BTFSS  0C.4
04F3:  GOTO   4F2
04F4:  MOVWF  19
....................                lcd_gotoxy(1,1); 
04F5:  MOVLW  01
04F6:  MOVWF  35
04F7:  MOVWF  36
04F8:  CALL   0D1
....................                printf(lcd_putc,"\f OPCION %i",opc); 
04F9:  MOVLW  04
04FA:  BSF    03.6
04FB:  MOVWF  0D
04FC:  MOVLW  00
04FD:  MOVWF  0F
04FE:  BCF    03.0
04FF:  MOVLW  09
0500:  BCF    03.6
0501:  MOVWF  27
0502:  CALL   10F
0503:  MOVF   20,W
0504:  MOVWF  27
0505:  MOVLW  18
0506:  MOVWF  28
0507:  CALL   17B
....................                lcd_gotoxy(1,2); 
0508:  MOVLW  01
0509:  MOVWF  35
050A:  MOVLW  02
050B:  MOVWF  36
050C:  CALL   0D1
....................                printf(lcd_putc,"Enviando= %1D",valor); 
050D:  MOVLW  0A
050E:  BSF    03.6
050F:  MOVWF  0D
0510:  MOVLW  00
0511:  MOVWF  0F
0512:  BCF    03.0
0513:  MOVLW  0A
0514:  BCF    03.6
0515:  MOVWF  27
0516:  CALL   10F
0517:  MOVF   25,W
0518:  MOVWF  27
0519:  MOVLW  18
051A:  MOVWF  28
051B:  CALL   17B
....................                delay_ms(200); 
051C:  MOVLW  C8
051D:  MOVWF  35
051E:  CALL   02C
051F:  INCF   25,F
0520:  GOTO   4ED
....................             } 
....................             output_low(pin_c3); 
0521:  BCF    26.3
0522:  MOVF   26,W
0523:  BSF    03.5
0524:  MOVWF  07
0525:  BCF    03.5
0526:  BCF    07.3
....................             lcd_putc("\f"); 
0527:  MOVLW  11
0528:  BSF    03.6
0529:  MOVWF  0D
052A:  MOVLW  00
052B:  MOVWF  0F
052C:  BCF    03.6
052D:  CALL   1D2
....................             break; 
052E:  GOTO   613
....................  
....................          case 2: 
....................             opc=0; 
052F:  CLRF   20
....................  
....................             output_high(pin_c3); 
0530:  BCF    26.3
0531:  MOVF   26,W
0532:  BSF    03.5
0533:  MOVWF  07
0534:  BCF    03.5
0535:  BSF    07.3
....................             tem=getc(); 
0536:  BTFSS  0C.5
0537:  GOTO   536
0538:  MOVF   1A,W
0539:  CLRF   28
053A:  MOVWF  27
053B:  CALL   228
053C:  MOVF   7A,W
053D:  MOVWF  24
053E:  MOVF   79,W
053F:  MOVWF  23
0540:  MOVF   78,W
0541:  MOVWF  22
0542:  MOVF   77,W
0543:  MOVWF  21
....................             tem=tem/100; 
0544:  MOVF   24,W
0545:  MOVWF  2A
0546:  MOVF   23,W
0547:  MOVWF  29
0548:  MOVF   22,W
0549:  MOVWF  28
054A:  MOVF   21,W
054B:  MOVWF  27
054C:  CLRF   2E
054D:  CLRF   2D
054E:  MOVLW  48
054F:  MOVWF  2C
0550:  MOVLW  85
0551:  MOVWF  2B
0552:  GOTO   245
0553:  MOVF   7A,W
0554:  MOVWF  24
0555:  MOVF   79,W
0556:  MOVWF  23
0557:  MOVF   78,W
0558:  MOVWF  22
0559:  MOVF   77,W
055A:  MOVWF  21
....................  
....................             while(opc==0) 
055B:  MOVF   20,F
055C:  BTFSS  03.2
055D:  GOTO   592
....................             {   
....................                lcd_gotoxy(1,1); 
055E:  MOVLW  01
055F:  MOVWF  35
0560:  MOVWF  36
0561:  CALL   0D1
....................                lcd_putc("\fTEMPERATURA"); 
0562:  MOVLW  12
0563:  BSF    03.6
0564:  MOVWF  0D
0565:  MOVLW  00
0566:  MOVWF  0F
0567:  BCF    03.6
0568:  CALL   1D2
....................                lcd_gotoxy(2,2); 
0569:  MOVLW  02
056A:  MOVWF  35
056B:  MOVWF  36
056C:  CALL   0D1
....................                printf(lcd_putc,"C= %f    ",tem); 
056D:  MOVLW  43
056E:  MOVWF  34
056F:  CALL   0E3
0570:  MOVLW  3D
0571:  MOVWF  34
0572:  CALL   0E3
0573:  MOVLW  20
0574:  MOVWF  34
0575:  CALL   0E3
0576:  MOVLW  89
0577:  MOVWF  04
0578:  MOVF   24,W
0579:  MOVWF  2A
057A:  MOVF   23,W
057B:  MOVWF  29
057C:  MOVF   22,W
057D:  MOVWF  28
057E:  MOVF   21,W
057F:  MOVWF  27
0580:  MOVLW  02
0581:  MOVWF  2B
0582:  CALL   360
0583:  MOVLW  1B
0584:  BSF    03.6
0585:  MOVWF  0D
0586:  MOVLW  00
0587:  MOVWF  0F
0588:  BSF    03.0
0589:  MOVLW  04
058A:  BCF    03.6
058B:  MOVWF  27
058C:  CALL   10F
....................  
....................                opc=getc(); 
058D:  BTFSS  0C.5
058E:  GOTO   58D
058F:  MOVF   1A,W
0590:  MOVWF  20
0591:  GOTO   55B
....................             } 
....................             output_high(pin_c4); 
0592:  BCF    26.4
0593:  MOVF   26,W
0594:  BSF    03.5
0595:  MOVWF  07
0596:  BCF    03.5
0597:  BSF    07.4
....................             output_low(pin_c3); 
0598:  BCF    26.3
0599:  MOVF   26,W
059A:  BSF    03.5
059B:  MOVWF  07
059C:  BCF    03.5
059D:  BCF    07.3
....................             delay_ms(40); 
059E:  MOVLW  28
059F:  MOVWF  35
05A0:  CALL   02C
....................             output_low(pin_c4); 
05A1:  BCF    26.4
05A2:  MOVF   26,W
05A3:  BSF    03.5
05A4:  MOVWF  07
05A5:  BCF    03.5
05A6:  BCF    07.4
....................             lcd_putc("\f"); 
05A7:  MOVLW  1E
05A8:  BSF    03.6
05A9:  MOVWF  0D
05AA:  MOVLW  00
05AB:  MOVWF  0F
05AC:  BCF    03.6
05AD:  CALL   1D2
....................             break; 
05AE:  GOTO   613
....................  
....................          case 3: 
....................             opc=0; 
05AF:  CLRF   20
....................  
....................             output_high(pin_c3); 
05B0:  BCF    26.3
05B1:  MOVF   26,W
05B2:  BSF    03.5
05B3:  MOVWF  07
05B4:  BCF    03.5
05B5:  BSF    07.3
....................  
....................             while(opc==0) 
05B6:  MOVF   20,F
05B7:  BTFSS  03.2
05B8:  GOTO   5F7
....................             {   
....................                tem=getc(); 
05B9:  BTFSS  0C.5
05BA:  GOTO   5B9
05BB:  MOVF   1A,W
05BC:  CLRF   28
05BD:  MOVWF  27
05BE:  CALL   228
05BF:  MOVF   7A,W
05C0:  MOVWF  24
05C1:  MOVF   79,W
05C2:  MOVWF  23
05C3:  MOVF   78,W
05C4:  MOVWF  22
05C5:  MOVF   77,W
05C6:  MOVWF  21
....................                lcd_gotoxy(1,1); 
05C7:  MOVLW  01
05C8:  MOVWF  35
05C9:  MOVWF  36
05CA:  CALL   0D1
....................                lcd_putc("\fTEMPERATURA"); 
05CB:  MOVLW  1F
05CC:  BSF    03.6
05CD:  MOVWF  0D
05CE:  MOVLW  00
05CF:  MOVWF  0F
05D0:  BCF    03.6
05D1:  CALL   1D2
....................                lcd_gotoxy(2,2); 
05D2:  MOVLW  02
05D3:  MOVWF  35
05D4:  MOVWF  36
05D5:  CALL   0D1
....................                printf(lcd_putc,"C= %f    ",tem); 
05D6:  MOVLW  43
05D7:  MOVWF  34
05D8:  CALL   0E3
05D9:  MOVLW  3D
05DA:  MOVWF  34
05DB:  CALL   0E3
05DC:  MOVLW  20
05DD:  MOVWF  34
05DE:  CALL   0E3
05DF:  MOVLW  89
05E0:  MOVWF  04
05E1:  MOVF   24,W
05E2:  MOVWF  2A
05E3:  MOVF   23,W
05E4:  MOVWF  29
05E5:  MOVF   22,W
05E6:  MOVWF  28
05E7:  MOVF   21,W
05E8:  MOVWF  27
05E9:  MOVLW  02
05EA:  MOVWF  2B
05EB:  CALL   360
05EC:  MOVLW  28
05ED:  BSF    03.6
05EE:  MOVWF  0D
05EF:  MOVLW  00
05F0:  MOVWF  0F
05F1:  BSF    03.0
05F2:  MOVLW  04
05F3:  BCF    03.6
05F4:  MOVWF  27
05F5:  CALL   10F
05F6:  GOTO   5B6
....................             } 
....................             output_high(pin_c4); 
05F7:  BCF    26.4
05F8:  MOVF   26,W
05F9:  BSF    03.5
05FA:  MOVWF  07
05FB:  BCF    03.5
05FC:  BSF    07.4
....................             output_low(pin_c3); 
05FD:  BCF    26.3
05FE:  MOVF   26,W
05FF:  BSF    03.5
0600:  MOVWF  07
0601:  BCF    03.5
0602:  BCF    07.3
....................             delay_ms(40); 
0603:  MOVLW  28
0604:  MOVWF  35
0605:  CALL   02C
....................             output_low(pin_c4); 
0606:  BCF    26.4
0607:  MOVF   26,W
0608:  BSF    03.5
0609:  MOVWF  07
060A:  BCF    03.5
060B:  BCF    07.4
....................             lcd_putc("\f"); 
060C:  MOVLW  2B
060D:  BSF    03.6
060E:  MOVWF  0D
060F:  MOVLW  00
0610:  MOVWF  0F
0611:  BCF    03.6
0612:  CALL   1D2
....................             break; 
....................       } 
0613:  GOTO   4D6
....................    } 
.................... } 
....................  
0614:  SLEEP
....................  
.................... /*// ---------- INT_RDA ---------- 
.................... #int_RDA 
.................... RDA_isr() 
.................... { 
....................    valor=getc(); 
.................... } 
.................... // ---------- MAIN ---------- 
.................... void main() 
.................... {   
....................    lcd_init(); 
....................    enable_interrupts(INT_RDA); 
....................    enable_interrupts(GLOBAL); 
....................     
....................    for(;;) 
....................    { 
....................       lcd_gotoxy(1,1); 
....................       printf(lcd_putc,"Recibido= %1D",valor); 
....................    } 
.................... }*/ 

Configuration Fuses:
   Word  1: 2FE1   XT NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
